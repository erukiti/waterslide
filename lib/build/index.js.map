{"version":3,"sources":["../../src/build/index.js"],"names":["EventEmitter","require","config","Plugin","plugin","Builder","Build","constructor","cliUtils","opts","startLocal","builder","isBuild","build","isRun","run","isTest","test","isWatch","watch","env","entries","getLocal","testers","builders","map","name","Klass","requireBuilder","_compiled","find","isCompiled","_test","message","finalizer","requireFinalizer","length","forEach","tester","result","className","isError","error","stdout","stderr","process","requireTester","push","filter","entry","getTypes","includes","type","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\n\nconst {EventEmitter} = require('events')\n\nconst config = require('../config')\nconst Plugin = require('../plugin')\nconst plugin = new Plugin()\n\nconst Builder = require('./builder')\n\nclass Build {\n    /**\n     *\n     * @param {CliUtis} cliUtils\n     * @param {*} opts\n     */\n    constructor(cliUtils, opts) {\n        config.startLocal()\n\n        this.builder = new Builder(this)\n        this.cliUtils = cliUtils\n\n        this.isBuild = opts.build\n        this.isRun = opts.run\n        this.isTest = opts.test\n        this.isWatch = opts.watch\n        this.env = opts.env || 'development'\n\n        this.entries = config.getLocal('entries')\n        this.testers = []\n        this.builders = config.getLocal('builders').map(name => {\n            const Klass = plugin.requireBuilder(name)\n            return new Klass(this.builder)\n        })\n    }\n\n    _compiled() {\n        if (this.builders.find(builder => !builder.isCompiled)) {\n            return\n        }\n\n        this._test()\n\n        if (this.isBuild || this.isRun) {\n            // assert if (config.getLocal('finalizer')) {\n\n            if (!config.getLocal('finalizer')) {\n                this.cliUtils.message('build complete.')\n                return\n            }\n\n            if (!this.finalizer) {\n                const Klass = plugin.requireFinalizer(config.getLocal('finalizer'))\n                this.finalizer = new Klass(this.builder)\n            }\n            // assertFalse(this.isBuild && this.isRun)\n\n            if (this.isBuild) {\n                this.finalizer.build()\n            } else if (this.isRun) {\n                this.cliUtils.message('run application')\n                this.finalizer.run()\n            }\n        }\n    }\n\n    _test() {\n        if (this.isTest && this.testers.length > 0) {\n            this.testers.forEach(tester => {\n                const result = tester.test()\n                const className = tester.constructor.name\n                if (result.isError) {\n                    this.builder.error(className)\n                    if (result.stdout) {\n                        this.builder.error(result.stdout)\n                    }\n                    if (result.stderr) {\n                        this.builder.error(result.stderr)\n                    }\n                } else {\n                    this.builder.message(`${className}: no error`)\n                }\n            })\n        }\n    }\n\n    process() {\n        if (this.isTest) {\n            const testers = config.getLocal('testers') || []\n\n            testers.forEach(name => {\n                const Klass = plugin.requireTester(name)\n                const tester = new Klass(this.builder)\n                // if (this.isWatch) {\n                //     tester.watch()\n                // } else {\n                this.testers.push(tester)\n                // }\n            })\n\n            if (!this.isRun && !this.isBuild) {\n                this._test()\n                return\n            }\n        }\n\n        this.builders.forEach(builder => {\n            const entries = this.entries.filter(entry =>\n                entry.opts && builder.getTypes().includes(entry.opts.type)\n            )\n\n            if (this.isWatch) {\n                builder.watch(entries)\n            } else {\n                builder.run(entries)\n            }\n        })\n    }\n}\n\nmodule.exports = Build\n"]}