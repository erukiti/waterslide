{"version":3,"sources":["../src/config.js"],"names":["os","require","path","process","fs","Config","constructor","globalConfigPath","join","homedir","globalConfig","_configRead","localConfig","isExists","stat","statSync","cwd","e","startLocal","localConfigPath","filePath","JSON","parse","readFileSync","toString","_configWrite","config","writeFileSync","stringify","getLocal","key","getGlobal","getAuthor","author","name","email","homepage","url","writeLocal","value","writeGlobal","module","exports"],"mappings":"AAAA;;AAGA,MAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,MAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,MAAME,UAAUF,QAAQ,SAAR,CAAhB;AACA,MAAMG,KAAKH,QAAQ,IAAR,CAAX;;AAEA,MAAMI,MAAN,CAAa;;AAMTC,kBAAc;AACV,aAAKC,gBAAL,GAAwBL,KAAKM,IAAL,CAAUR,GAAGS,OAAH,EAAV,EAAwB,kBAAxB,CAAxB;AACA,aAAKC,YAAL,GAAoB,KAAKC,WAAL,CAAiB,KAAKJ,gBAAtB,CAApB;AACA,aAAKK,WAAL,GAAmB,EAAnB;AACH;;AAEDC,eAAW;AACP,YAAI;AACA,kBAAMC,OAAOV,GAAGW,QAAH,CAAYb,KAAKM,IAAL,CAAUL,QAAQa,GAAR,EAAV,EAAyB,kBAAzB,CAAZ,CAAb;AACA,mBAAOF,QAAQ,OAAOA,IAAP,KAAgB,WAA/B;AACH,SAHD,CAGE,OAAOG,CAAP,EAAU;AACR,mBAAO,KAAP;AACH;AACJ;;AAEDC,iBAAa;AACT,aAAKC,eAAL,GAAuBjB,KAAKM,IAAL,CAAUL,QAAQa,GAAR,EAAV,EAAyB,kBAAzB,CAAvB;AACA,aAAKJ,WAAL,GAAmB,KAAKD,WAAL,CAAiB,KAAKQ,eAAtB,CAAnB;AACH;;AAEDR,gBAAYS,QAAZ,EAA8B;AAC1B,YAAI;AACA,mBAAOC,KAAKC,KAAL,CAAWlB,GAAGmB,YAAH,CAAgBH,QAAhB,EAA0BI,QAA1B,EAAX,CAAP;AACH,SAFD,CAEE,OAAOP,CAAP,EAAU;AACR,mBAAO,EAAP;AACH;AACJ;;AAEDQ,iBAAaL,QAAb,EAA+BM,MAA/B,EAA4C;AACxCtB,WAAGuB,aAAH,CAAiBP,QAAjB,EAA4B,GAAEC,KAAKO,SAAL,CAAeF,MAAf,EAAuB,IAAvB,EAA6B,IAA7B,CAAmC,IAAjE;AACH;;AAEDG,aAASC,GAAT,EAAsB;AAClB,eAAO,KAAKlB,WAAL,CAAiBkB,GAAjB,CAAP;AACH;;AAEDC,cAAUD,GAAV,EAAuB;AACnB,eAAO,KAAKpB,YAAL,CAAkBoB,GAAlB,CAAP;AACH;;AAEDE,gBAAY;AACR,YAAI,KAAKtB,YAAL,CAAkBuB,MAAtB,EAA8B;AAC1B,mBAAO,KAAKvB,YAAL,CAAkBuB,MAAzB;AACH,SAFD,MAEO;AACH,kBAAMA,SAAS,EAAf;AACA,gBAAI,KAAKvB,YAAL,CAAkBwB,IAAtB,EAA4B;AACxBD,uBAAOC,IAAP,GAAc,KAAKxB,YAAL,CAAkBwB,IAAhC;AACH;AACD,gBAAI,KAAKxB,YAAL,CAAkByB,KAAtB,EAA6B;AACzBF,uBAAOE,KAAP,GAAe,KAAKzB,YAAL,CAAkByB,KAAjC;AACH;AACD,gBAAI,KAAKzB,YAAL,CAAkB0B,QAAtB,EAAgC;AAC5BH,uBAAOI,GAAP,GAAa,KAAK3B,YAAL,CAAkB0B,QAA/B;AACH;;AAED,mBAAOH,MAAP;AACH;AACJ;;AAEDK,eAAWR,GAAX,EAAwBS,KAAxB,EAAoC;AAChC,aAAK3B,WAAL,CAAiBkB,GAAjB,IAAwBS,KAAxB;AACA,aAAKd,YAAL,CAAkB,KAAKN,eAAvB,EAAwC,KAAKP,WAA7C;AACH;;AAED4B,gBAAYV,GAAZ,EAAyBS,KAAzB,EAAqC;AACjC,aAAK7B,YAAL,CAAkBoB,GAAlB,IAAyBS,KAAzB;AACA,aAAKd,YAAL,CAAkB,KAAKlB,gBAAvB,EAAyC,KAAKG,YAA9C;AACH;;AAzEQ;;AA6Eb,MAAMgB,SAAS,IAAIrB,MAAJ,EAAf;;AAEAoC,OAAOC,OAAP,GAAiBhB,MAAjB","file":"config.js","sourcesContent":["'use strict'\n// @flow\n\nconst os = require('os')\nconst path = require('path')\nconst process = require('process')\nconst fs = require('fs')\n\nclass Config {\n    globalConfigPath: string\n    globalConfig: Object\n    localConfigPath: string\n    localConfig: Object\n\n    constructor() {\n        this.globalConfigPath = path.join(os.homedir(), '.waterslide.json')\n        this.globalConfig = this._configRead(this.globalConfigPath)\n        this.localConfig = {}\n    }\n\n    isExists() {\n        try {\n            const stat = fs.statSync(path.join(process.cwd(), '.waterslide.json'))\n            return stat && typeof stat !== 'undefined'\n        } catch (e) {\n            return false\n        }\n    }\n\n    startLocal() {\n        this.localConfigPath = path.join(process.cwd(), '.waterslide.json')\n        this.localConfig = this._configRead(this.localConfigPath)\n    }\n\n    _configRead(filePath: string) {\n        try {\n            return JSON.parse(fs.readFileSync(filePath).toString())\n        } catch (e) {\n            return {}\n        }\n    }\n\n    _configWrite(filePath: string, config: any) {\n        fs.writeFileSync(filePath, `${JSON.stringify(config, null, '  ')}\\n`)\n    }\n\n    getLocal(key: string) {\n        return this.localConfig[key]\n    }\n\n    getGlobal(key: string) {\n        return this.globalConfig[key]\n    }\n\n    getAuthor() {\n        if (this.globalConfig.author) {\n            return this.globalConfig.author\n        } else {\n            const author = {}\n            if (this.globalConfig.name) {\n                author.name = this.globalConfig.name\n            }\n            if (this.globalConfig.email) {\n                author.email = this.globalConfig.email\n            }\n            if (this.globalConfig.homepage) {\n                author.url = this.globalConfig.homepage\n            }\n\n            return author\n        }\n    }\n\n    writeLocal(key: string, value: any) {\n        this.localConfig[key] = value\n        this._configWrite(this.localConfigPath, this.localConfig)\n    }\n\n    writeGlobal(key: string, value: any) {\n        this.globalConfig[key] = value\n        this._configWrite(this.globalConfigPath, this.globalConfig)\n    }\n\n}\n\nconst config = new Config()\n\nmodule.exports = config\n"]}