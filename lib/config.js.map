{"version":3,"sources":["../src/config.js"],"names":["os","require","path","process","fs","JsonFileName","Config","globalConfigPath","join","homedir","globalConfig","_configRead","localConfig","stat","statSync","cwd","e","localConfigPath","filePath","JSON","parse","readFileSync","toString","config","writeFileSync","stringify","key","author","name","email","homepage","url","value","_configWrite","module","exports"],"mappings":"AAAA;;;;;;AAGA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,UAAUF,QAAQ,SAAR,CAAhB;AACA,IAAMG,KAAKH,QAAQ,IAAR,CAAX;;AAQA,IAAMI,eAAe,kBAArB;;IAEMC,M;AAMF,sBAAc;AAAA;;AACV,aAAKC,gBAAL,GAAwBL,KAAKM,IAAL,CAAUR,GAAGS,OAAH,EAAV,EAAwBJ,YAAxB,CAAxB;AACA,aAAKK,YAAL,GAAoB,KAAKC,WAAL,CAAiB,KAAKJ,gBAAtB,CAApB;AACA,aAAKK,WAAL,GAAmB,EAAnB;AACH;;;;mCAEU;AACP,gBAAI;AACA,oBAAMC,OAAOT,GAAGU,QAAH,CAAYZ,KAAKM,IAAL,CAAUL,QAAQY,GAAR,EAAV,EAAyBV,YAAzB,CAAZ,CAAb;AACA,uBAAOQ,QAAQ,OAAOA,IAAP,KAAgB,WAA/B;AACH,aAHD,CAGE,OAAOG,CAAP,EAAU;AACR,uBAAO,KAAP;AACH;AACJ;;;qCAEY;AACT,iBAAKC,eAAL,GAAuBf,KAAKM,IAAL,CAAUL,QAAQY,GAAR,EAAV,EAAyBV,YAAzB,CAAvB;AACA,iBAAKO,WAAL,GAAmB,KAAKD,WAAL,CAAiB,KAAKM,eAAtB,CAAnB;AACH;;;oCAEWC,Q,EAAkB;AAC1B,gBAAI;AACA,uBAAOC,KAAKC,KAAL,CAAWhB,GAAGiB,YAAH,CAAgBH,QAAhB,EAA0BI,QAA1B,EAAX,CAAP;AACH,aAFD,CAEE,OAAON,CAAP,EAAU;AACR,uBAAO,EAAP;AACH;AACJ;;;qCAEYE,Q,EAAkBK,M,EAAa;AACxCnB,eAAGoB,aAAH,CAAiBN,QAAjB,EAA8BC,KAAKM,SAAL,CAAeF,MAAf,EAAuB,IAAvB,EAA6B,IAA7B,CAA9B;AACH;;;iCAEQG,G,EAAa;AAClB,mBAAO,KAAKd,WAAL,CAAiBc,GAAjB,CAAP;AACH;;;kCAESA,G,EAAa;AACnB,mBAAO,KAAKhB,YAAL,CAAkBgB,GAAlB,CAAP;AACH;;;oCAEW;AACR,gBAAI,KAAKhB,YAAL,CAAkBiB,MAAtB,EAA8B;AAC1B,uBAAO,KAAKjB,YAAL,CAAkBiB,MAAzB;AACH,aAFD,MAEO;AACH,oBAAMA,SAAS,EAAf;AACA,oBAAI,KAAKjB,YAAL,CAAkBkB,IAAtB,EAA4B;AACxBD,2BAAOC,IAAP,GAAc,KAAKlB,YAAL,CAAkBkB,IAAhC;AACH;AACD,oBAAI,KAAKlB,YAAL,CAAkBmB,KAAtB,EAA6B;AACzBF,2BAAOE,KAAP,GAAe,KAAKnB,YAAL,CAAkBmB,KAAjC;AACH;AACD,oBAAI,KAAKnB,YAAL,CAAkBoB,QAAtB,EAAgC;AAC5BH,2BAAOI,GAAP,GAAa,KAAKrB,YAAL,CAAkBoB,QAA/B;AACH;;AAED,uBAAOH,MAAP;AACH;AACJ;;;mCAEUD,G,EAAaM,K,EAAY;AAChC,iBAAKpB,WAAL,CAAiBc,GAAjB,IAAwBM,KAAxB;AACA,iBAAKC,YAAL,CAAkB,KAAKhB,eAAvB,EAAwC,KAAKL,WAA7C;AACH;;;oCAEWc,G,EAAaM,K,EAAY;AACjC,iBAAKtB,YAAL,CAAkBgB,GAAlB,IAAyBM,KAAzB;AACA,iBAAKC,YAAL,CAAkB,KAAK1B,gBAAvB,EAAyC,KAAKG,YAA9C;AACH;;;;;;AAIL,IAAMa,SAAS,IAAIjB,MAAJ,EAAf;;AAEA4B,OAAOC,OAAP,GAAiBZ,MAAjB","file":"config.js","sourcesContent":["'use strict'\n// @flow\n\nconst os = require('os')\nconst path = require('path')\nconst process = require('process')\nconst fs = require('fs')\n\nexport type Entry = {\n    src: string,\n    type?: string,\n    opts?: {[string]: string}\n}\n\nconst JsonFileName = '.innocentia.json'\n\nclass Config {\n    globalConfigPath: string\n    globalConfig: Object\n    localConfigPath: string\n    localConfig: Object\n\n    constructor() {\n        this.globalConfigPath = path.join(os.homedir(), JsonFileName)\n        this.globalConfig = this._configRead(this.globalConfigPath)\n        this.localConfig = {}\n    }\n\n    isExists() {\n        try {\n            const stat = fs.statSync(path.join(process.cwd(), JsonFileName))\n            return stat && typeof stat !== 'undefined'\n        } catch (e) {\n            return false\n        }\n    }\n\n    startLocal() {\n        this.localConfigPath = path.join(process.cwd(), JsonFileName)\n        this.localConfig = this._configRead(this.localConfigPath)\n    }\n\n    _configRead(filePath: string) {\n        try {\n            return JSON.parse(fs.readFileSync(filePath).toString())\n        } catch (e) {\n            return {}\n        }\n    }\n\n    _configWrite(filePath: string, config: any) {\n        fs.writeFileSync(filePath, `${JSON.stringify(config, null, '  ')}\\n`)\n    }\n\n    getLocal(key: string) {\n        return this.localConfig[key]\n    }\n\n    getGlobal(key: string) {\n        return this.globalConfig[key]\n    }\n\n    getAuthor() {\n        if (this.globalConfig.author) {\n            return this.globalConfig.author\n        } else {\n            const author = {}\n            if (this.globalConfig.name) {\n                author.name = this.globalConfig.name\n            }\n            if (this.globalConfig.email) {\n                author.email = this.globalConfig.email\n            }\n            if (this.globalConfig.homepage) {\n                author.url = this.globalConfig.homepage\n            }\n\n            return author\n        }\n    }\n\n    writeLocal(key: string, value: any) {\n        this.localConfig[key] = value\n        this._configWrite(this.localConfigPath, this.localConfig)\n    }\n\n    writeGlobal(key: string, value: any) {\n        this.globalConfig[key] = value\n        this._configWrite(this.globalConfigPath, this.globalConfig)\n    }\n\n}\n\nconst config = new Config()\n\nmodule.exports = config\n"]}