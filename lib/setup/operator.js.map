{"version":3,"sources":["../../src/setup/operator.js"],"names":["getConfig","Plugin","require","Setup","config","plugin","Operator","constructor","setup","getOpt","opt","getNoOpt","noOpt","getNoUse","noUse","getProjectDir","projectDir","addCommand","priority","command","setDirectory","directory","type","description","documentInstaller","operator","getInstaller","setDriectory","Error","directories","writeLocal","getGenerator","name","generators","Klass","requireGenerator","replaceGenerator","generator","error","installers","klass","requireInstaller","installer","cliUtils","verbose","install","isInstalled","setFinalizer","finalizer","addBuilder","builders","includes","push","addTester","testers","readFile","fsio","readFileSync","checkExists","writeFile","content","opts","entries","path","text","filter","entry","map","then","isWrote","message","postInstall","cb","postInstalls","setInfo","title","info","module","exports"],"mappings":"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","file":"operator.js","sourcesContent":["'use strict'\n// @flow\n\nconst {getConfig, Plugin} = require('../waterslide')\nconst Setup = require('./')\nimport type {Generator, Installer} from './'\n\nconst config = getConfig()\nconst plugin = new Plugin()\n\ntype InstallerFactory = {\n    getInstaller: (Operator) => ?Installer\n}\n\nclass Operator {\n    setup: Setup\n\n    constructor(setup: Setup) {\n        this.setup = setup\n    }\n\n    // FIXME\n    getOpt() {\n        return this.setup.opt\n    }\n\n    getNoOpt() {\n        return this.setup.noOpt\n    }\n\n    getNoUse() {\n        return this.setup.noUse\n    }\n\n    /**\n     * @returns {string}\n     */\n    getProjectDir() {\n        return this.setup.projectDir\n    }\n\n    /**\n     *\n     * @param {number} priority [0..9]\n     * @param {string} command\n     */\n    addCommand(priority: number, command: string) {\n        this.setup.command.addCommand(priority, command)\n    }\n\n\n    /**\n     *\n     * @param {string} directory\n     * @param {string} type\n     * @param {string} description\n     */\n    // FIXME\n    async setDirectory(directory: string, type: string, description: string) {\n        const documentInstaller = await this.setup.operator.getInstaller('document')\n        if (!documentInstaller.setDriectory) {\n            throw Error()\n        }\n\n        documentInstaller.setDirectory(directory, description)\n        if (type) {\n            this.setup.directories[type] = directory\n            config.writeLocal('directories', this.setup.directories)\n        }\n    }\n\n    /**\n     *\n     * @param {string} name\n     */\n    getGenerator(name: string) {\n        if (!this.setup.generators[name]) {\n            const Klass = plugin.requireGenerator(name)\n            this.setup.generators[name] = new Klass(this.setup.operator)\n        }\n        return this.setup.generators[name]\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @param {Generator} generator\n     */\n    replaceGenerator(name: string, generator: Generator) {\n        if (this.setup.generators[name]) {\n            this.setup.operator.error(`${name} generator is already used.`)\n        } else {\n            this.setup.generators[name] = generator\n        }\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {Installer}\n     */\n    async getInstaller(name: string) {\n        if (!this.setup.installers[name]) {\n            const klass: InstallerFactory = plugin.requireInstaller(name)\n            const installer = await klass.getInstaller(this.setup.operator)\n            if (!installer) {\n                this.setup.cliUtils.verbose(`${name} installer is ignored.`)\n\n                return {\n                    install: () => {}\n                }\n            }\n\n            this.setup.cliUtils.verbose(`installer: ${name}`, 1)\n            this.setup.installers[name] = installer\n        }\n\n        return this.setup.installers[name]\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {boolean}\n     */\n    isInstalled(name: string) {\n        return this.setup.installers[name] !== null\n    }\n\n    /**\n     *\n     * @param {string} name\n     */\n    setFinalizer(name: string) {\n        this.setup.finalizer = name\n        config.writeLocal('finalizer', this.setup.finalizer)\n    }\n\n    /**\n     *\n     * @param {string} name\n     */\n    addBuilder(name: string) {\n        if (this.setup.builders.includes(name)) {\n            return\n        }\n        this.setup.builders.push(name)\n        config.writeLocal('builders', this.setup.builders)\n    }\n\n    /**\n     *\n     * @param {string} name\n     */\n    addTester(name: string) {\n        if (this.setup.testers.includes(name)) {\n            return\n        }\n\n        this.setup.testers.push(name)\n        config.writeLocal('testers', this.setup.testers)\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {Promise<Buffer>}\n     */\n    readFile(name: string) {\n        return this.setup.fsio.readFile(name)\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {Buffer}\n     */\n    readFileSync(name: string) {\n        return this.setup.fsio.readFileSync(name)\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {boolean}\n     */\n    checkExists(name: string) {\n        return this.setup.fsio.checkExists(name)\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @param {string|Buffer} content\n     * @param {Object} opts\n     */\n    writeFile(name: string, content: string | Buffer, opts: Object = {}) {\n        this.setup.entries.push({path: name, text: content, opts})\n\n        config.writeLocal('entries', this.setup.entries.filter(entry => entry.opts && entry.opts.type).map(entry => {\n            return {path: entry.path, opts: entry.opts}\n        }))\n\n        return this.setup.fsio.writeFile(name, content, opts).then(isWrote => {\n            if (isWrote) {\n                this.setup.cliUtils.message(`wrote ${name}`, 1)\n            }\n        })\n    }\n\n    /**\n     *\n     * @param {function} cb\n     */\n    postInstall(cb: () => void) {\n        this.setup.postInstalls.push(cb)\n    }\n\n    /**\n     *\n     * @param {string} title\n     * @param {string} message\n     */\n    setInfo(title: string, message: string) {\n        this.setup.info.push({title, message})\n        config.writeLocal('info', this.setup.info)\n    }\n\n    /**\n     *\n     * @param {string} message\n     */\n    verbose(message: string) {\n        this.setup.cliUtils.verbose(message, 1)\n    }\n\n    /**\n     *\n     * @param {string} message\n     */\n    message(message: string) {\n        this.setup.cliUtils.message(message, 1)\n    }\n\n    /**\n     *\n     * @param {string} message\n     */\n    error(message: string) {\n        this.setup.cliUtils.error(message, 1)\n    }\n}\n\nmodule.exports = Operator\n"]}