{"version":3,"sources":["../../src/setup/operator.js"],"names":["getConfig","Plugin","require","Setup","config","plugin","Operator","constructor","setup","getOpt","opt","getNoOpt","noOpt","getNoUse","noUse","getProjectDir","projectDir","addCommand","priority","command","setDirectory","directory","type","description","documentInstaller","getInstaller","directories","writeLocal","getGenerator","name","generators","Klass","requireGenerator","operator","replaceGenerator","generator","error","installers","klass","requireInstaller","installer","cliUtils","verbose","install","isInstalled","setFinalizer","finalizer","addBuilder","builders","includes","push","addTester","testers","readFile","fsio","readFileSync","checkExists","writeFile","content","opts","entries","path","text","filter","entry","map","then","isWrote","message","postInstall","cb","postInstalls","setInfo","title","info","module","exports"],"mappings":"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","file":"operator.js","sourcesContent":["'use strict'\n// @flow\n\nconst {getConfig, Plugin} = require('../waterslide')\nconst Setup = require('./')\nimport type {Generator, Installer} from './'\n\nconst config = getConfig()\nconst plugin = new Plugin()\n\ntype InstallerFactory = {\n    getInstaller: (Operator) => ?Installer\n}\n\nclass Operator {\n    setup: Setup\n\n    constructor(setup: Setup) {\n        this.setup = setup\n    }\n\n    // FIXME\n    getOpt() {\n        return this.setup.opt\n    }\n\n    getNoOpt() {\n        return this.setup.noOpt\n    }\n\n    getNoUse() {\n        return this.setup.noUse\n    }\n\n    /**\n     * @returns {string}\n     */\n    getProjectDir() {\n        return this.setup.projectDir\n    }\n\n    /**\n     *\n     * @param {number} priority [0..9]\n     * @param {string} command\n     */\n    addCommand(priority: number, command: string) {\n        this.setup.command.addCommand(priority, command)\n    }\n\n\n    /**\n     *\n     * @param {string} directory\n     * @param {string} type\n     * @param {string} description\n     */\n    // FIXME\n    async setDirectory(directory: string, type: string, description: string) {\n        const documentInstaller = await this.getInstaller('document')\n        // console.dir(typeof documentInstaller.setDirectory)\n        // if (typeof documentInstaller.setDriectory !== 'function') {\n        //     throw Error()\n        // }\n\n        documentInstaller.setDirectory(directory, description)\n        if (type) {\n            this.setup.directories[type] = directory\n            config.writeLocal('directories', this.setup.directories)\n        }\n    }\n\n    /**\n     *\n     * @param {string} name\n     */\n    getGenerator(name: string) {\n        if (!this.setup.generators[name]) {\n            const Klass = plugin.requireGenerator(name)\n            this.setup.generators[name] = new Klass(this.setup.operator)\n        }\n        return this.setup.generators[name]\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @param {Generator} generator\n     */\n    replaceGenerator(name: string, generator: Generator) {\n        if (this.setup.generators[name]) {\n            this.setup.operator.error(`${name} generator is already used.`)\n        } else {\n            this.setup.generators[name] = generator\n        }\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {Installer}\n     */\n    async getInstaller(name: string) {\n        if (!this.setup.installers[name]) {\n            const klass: InstallerFactory = plugin.requireInstaller(name)\n            const installer = await klass.getInstaller(this.setup.operator)\n            if (!installer) {\n                this.setup.cliUtils.verbose(`${name} installer is ignored.`)\n\n                return {\n                    install: () => {}\n                }\n            }\n\n            this.setup.cliUtils.verbose(`installer: ${name}`, 1)\n            this.setup.installers[name] = installer\n        }\n\n        return this.setup.installers[name]\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {boolean}\n     */\n    isInstalled(name: string) {\n        return this.setup.installers[name] !== null\n    }\n\n    /**\n     *\n     * @param {string} name\n     */\n    setFinalizer(name: string) {\n        this.setup.finalizer = name\n        config.writeLocal('finalizer', this.setup.finalizer)\n    }\n\n    /**\n     *\n     * @param {string} name\n     */\n    addBuilder(name: string) {\n        if (this.setup.builders.includes(name)) {\n            return\n        }\n        this.setup.builders.push(name)\n        config.writeLocal('builders', this.setup.builders)\n    }\n\n    /**\n     *\n     * @param {string} name\n     */\n    addTester(name: string) {\n        if (this.setup.testers.includes(name)) {\n            return\n        }\n\n        this.setup.testers.push(name)\n        config.writeLocal('testers', this.setup.testers)\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {Promise<Buffer>}\n     */\n    readFile(name: string) {\n        return this.setup.fsio.readFile(name)\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {Buffer}\n     */\n    readFileSync(name: string) {\n        return this.setup.fsio.readFileSync(name)\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {boolean}\n     */\n    checkExists(name: string) {\n        return this.setup.fsio.checkExists(name)\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @param {string|Buffer} content\n     * @param {Object} opts\n     */\n    writeFile(name: string, content: string | Buffer, opts: Object = {}) {\n        this.setup.entries.push({path: name, text: content, opts})\n\n        config.writeLocal('entries', this.setup.entries.filter(entry => entry.opts && entry.opts.type).map(entry => {\n            return {path: entry.path, opts: entry.opts}\n        }))\n\n        return this.setup.fsio.writeFile(name, content, opts).then(isWrote => {\n            if (isWrote) {\n                this.setup.cliUtils.message(`wrote ${name}`, 1)\n            }\n        })\n    }\n\n    /**\n     *\n     * @param {function} cb\n     */\n    postInstall(cb: () => void) {\n        this.setup.postInstalls.push(cb)\n    }\n\n    /**\n     *\n     * @param {string} title\n     * @param {string} message\n     */\n    setInfo(title: string, message: string) {\n        this.setup.info.push({title, message})\n        config.writeLocal('info', this.setup.info)\n    }\n\n    /**\n     *\n     * @param {string} message\n     */\n    verbose(message: string) {\n        this.setup.cliUtils.verbose(message, 1)\n    }\n\n    /**\n     *\n     * @param {string} message\n     */\n    message(message: string) {\n        this.setup.cliUtils.message(message, 1)\n    }\n\n    /**\n     *\n     * @param {string} message\n     */\n    error(message: string) {\n        this.setup.cliUtils.error(message, 1)\n    }\n}\n\nmodule.exports = Operator\n"]}