{"version":3,"sources":["../../src/setup/command.js"],"names":["Command","constructor","childProcess","commands","addCommand","priority","command","push","exec","Promise","resolve","reject","child","on","err","code","signal","stdout","pipe","process","stderr","Error","execAll","cb","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAN,CAAc;AACVC,gBAAYC,YAAZ,EAA0B;AACtB,aAAKA,YAAL,GAAoBA,YAApB;AACA,aAAKC,QAAL,GAAgB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,CAAhB;AACH;;AAEDC,eAAWC,QAAX,EAAqBC,OAArB,EAA8B;AAC1B,aAAKH,QAAL,CAAcE,QAAd,EAAwBE,IAAxB,CAA6BD,OAA7B;AACH;;AAEDE,SAAKF,OAAL,EAAc;AACV,eAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,kBAAMC,QAAQ,KAAKV,YAAL,CAAkBM,IAAlB,CAAuBF,OAAvB,CAAd;AACAM,kBAAMC,EAAN,CAAS,OAAT,EAAkBC,OAAOH,OAAOG,GAAP,CAAzB;AACAF,kBAAMC,EAAN,CAAS,MAAT,EAAiB,CAACE,IAAD,EAAOC,MAAP,KAAkB;AAC/B,oBAAID,IAAJ,EAAU;AACNH,0BAAMK,MAAN,CAAaC,IAAb,CAAkBC,QAAQF,MAA1B;AACAL,0BAAMQ,MAAN,CAAaF,IAAb,CAAkBC,QAAQF,MAA1B;;AAEAN,2BAAO,IAAIU,KAAJ,CAAW,UAASf,OAAQ,gBAAeS,IAAK,EAAhD,CAAP;AACH,iBALD,MAKO;AACHL;AACH;AACJ,aATD;AAUH,SAbM,CAAP;AAcH;;AAEKY,WAAN,CAAcC,EAAd,EAAkB;AAAA;;AAAA;AACd,iBAAK,IAAIpB,QAAT,IAAqB,MAAKA,QAA1B,EAAoC;AAChC,qBAAK,IAAIG,OAAT,IAAoBH,QAApB,EAA8B;AAC1BoB,0BAAMA,GAAGjB,OAAH,CAAN;AACA,0BAAM,MAAKE,IAAL,CAAUF,OAAV,CAAN;AACH;AACJ;AANa;AAOjB;AAlCS;;AAqCdkB,OAAOC,OAAP,GAAiBzB,OAAjB","file":"command.js","sourcesContent":["'use strict'\n\nclass Command {\n    constructor(childProcess) {\n        this.childProcess = childProcess\n        this.commands = [[], [], [], [], [], [], [], [], [], []]\n    }\n\n    addCommand(priority, command) {\n        this.commands[priority].push(command)\n    }\n\n    exec(command) {\n        return new Promise((resolve, reject) => {\n            const child = this.childProcess.exec(command)\n            child.on('error', err => reject(err))\n            child.on('exit', (code, signal) => {\n                if (code) {\n                    child.stdout.pipe(process.stdout)\n                    child.stderr.pipe(process.stdout)\n\n                    reject(new Error(`error '${command}' is failed. ${code}`))\n                } else {\n                    resolve()\n                }\n            })\n        })\n    }\n\n    async execAll(cb) {\n        for (let commands of this.commands) {\n            for (let command of commands) {\n                cb && cb(command)\n                await this.exec(command)\n            }\n        }\n    }\n}\n\nmodule.exports = Command\n"]}