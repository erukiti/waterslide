{"version":3,"sources":["../../src/setup/command.js"],"names":["ChildProcess","require","CliUtils","Command","childProcess","cliUtils","commands","priority","command","push","Promise","resolve","reject","child","exec","stdout","pipe","process","stderr","on","err","code","signal","Error","cb","module","exports"],"mappings":"AAAA;;;;;;;;AAGA,IAAMA,eAAeC,QAAQ,eAAR,CAArB;;AAEA,IAAMC,WAAWD,QAAQ,cAAR,CAAjB;;IAEME,O;AAKF,qBAAYC,YAAZ,EAA+BC,QAA/B,EAAmD;AAAA;;AAC/C,aAAKD,YAAL,GAAoBA,YAApB;AACA,aAAKE,QAAL,GAAgB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,CAAhB;AACA,aAAKD,QAAL,GAAgBA,QAAhB;AACH;;;;mCAEUE,Q,EAAkBC,O,EAAiB;AAC1C,iBAAKF,QAAL,CAAcC,QAAd,EAAwBE,IAAxB,CAA6BD,OAA7B;AACH;;;6BAEIA,O,EAAiB;AAAA;;AAClB,mBAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;AACA,oBAAMC,QAAQ,MAAKT,YAAL,CAAkBU,IAAlB,CAAuBN,OAAvB,CAAd;AACAK,sBAAME,MAAN,CAAaC,IAAb,CAAkBC,QAAQF,MAA1B;AACAF,sBAAMK,MAAN,CAAaF,IAAb,CAAkBC,QAAQF,MAA1B;AACAF,sBAAMM,EAAN,CAAS,OAAT,EAAkB;AAAA,2BAAOP,OAAOQ,GAAP,CAAP;AAAA,iBAAlB;AACAP,sBAAMM,EAAN,CAAS,MAAT,EAAiB,UAACE,IAAD,EAAOC,MAAP,EAAkB;AAC/B,wBAAID,IAAJ,EAAU;AACNT,+BAAO,IAAIW,KAAJ,cAAoBf,OAApB,sBAA2Ca,IAA3C,CAAP;AACH,qBAFD,MAEO;AACHV;AACH;AACJ,iBAND;AAOH,aAbM,CAAP;AAcH;;;;kFAEaa,E;;;;;;;;;;;4CACW,KAAKlB,Q;;;;;;;;AAAjBA,wC;;;;;6CACeA,Q;;;;;;;;AAAXE,uC;;AACLgB,sCAAMA,GAAGhB,OAAH,CAAN;;uCACM,KAAKM,IAAL,CAAUN,OAAV,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMtBiB,OAAOC,OAAP,GAAiBvB,OAAjB","file":"command.js","sourcesContent":["'use strict'\n// @flow\n\nconst ChildProcess = require('child_process')\n\nconst CliUtils = require('../cli/utils')\n\nclass Command {\n    childProcess: any\n    commands: Array<Array<string>>\n    cliUtils: CliUtils\n\n    constructor(childProcess: any, cliUtils: CliUtils) {\n        this.childProcess = childProcess\n        this.commands = [[], [], [], [], [], [], [], [], [], []]\n        this.cliUtils = cliUtils\n    }\n\n    addCommand(priority: number, command: string) {\n        this.commands[priority].push(command)\n    }\n\n    exec(command: string) {\n        return new Promise((resolve, reject) => {\n            // this.cliUtils.verbose(command)\n            const child = this.childProcess.exec(command)\n            child.stdout.pipe(process.stdout)\n            child.stderr.pipe(process.stdout)\n            child.on('error', err => reject(err))\n            child.on('exit', (code, signal) => {\n                if (code) {\n                    reject(new Error(`error '${command}' is failed. ${code}`))\n                } else {\n                    resolve()\n                }\n            })\n        })\n    }\n\n    async execAll(cb: () => any) {\n        for (let commands of this.commands) {\n            for (let command of commands) {\n                cb && cb(command)\n                await this.exec(command)\n            }\n        }\n    }\n}\n\nmodule.exports = Command\n"]}