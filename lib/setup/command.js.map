{"version":3,"sources":["../../src/setup/command.js"],"names":["ChildProcess","require","CliUtils","Command","constructor","childProcess","cliUtils","commands","addCommand","priority","command","push","exec","Promise","resolve","reject","message","child","on","err","code","signal","Error","execAll","cb","module","exports"],"mappings":"AAAA;;;;AAGA,MAAMA,eAAeC,QAAQ,eAAR,CAArB;;AAEA,MAAMC,WAAWD,QAAQ,cAAR,CAAjB;;AAEA,MAAME,OAAN,CAAc;;AAKVC,gBAAYC,YAAZ,EAA+BC,QAA/B,EAAmD;AAC/C,aAAKD,YAAL,GAAoBA,YAApB;AACA,aAAKE,QAAL,GAAgB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,CAAhB;AACA,aAAKD,QAAL,GAAgBA,QAAhB;AACH;;AAEDE,eAAWC,QAAX,EAA6BC,OAA7B,EAA8C;AAC1C,aAAKH,QAAL,CAAcE,QAAd,EAAwBE,IAAxB,CAA6BD,OAA7B;AACH;;AAEDE,SAAKF,OAAL,EAAsB;AAClB,eAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,iBAAKT,QAAL,CAAcU,OAAd,CAAsBN,OAAtB;AACA,kBAAMO,QAAQ,KAAKZ,YAAL,CAAkBO,IAAlB,CAAuBF,OAAvB,CAAd;AACA;AACA;AACAO,kBAAMC,EAAN,CAAS,OAAT,EAAkBC,OAAOJ,OAAOI,GAAP,CAAzB;AACAF,kBAAMC,EAAN,CAAS,MAAT,EAAiB,CAACE,IAAD,EAAOC,MAAP,KAAkB;AAC/B,oBAAID,IAAJ,EAAU;AACNL,2BAAO,IAAIO,KAAJ,CAAW,UAASZ,OAAQ,gBAAeU,IAAK,EAAhD,CAAP;AACH,iBAFD,MAEO;AACHN;AACH;AACJ,aAND;AAOH,SAbM,CAAP;AAcH;;AAEKS,WAAN,CAAcC,EAAd,EAA6B;AAAA;;AAAA;AACzB,iBAAK,IAAIjB,QAAT,IAAqB,MAAKA,QAA1B,EAAoC;AAChC,qBAAK,IAAIG,OAAT,IAAoBH,QAApB,EAA8B;AAC1BiB,0BAAMA,GAAGd,OAAH,CAAN;AACA,0BAAM,MAAKE,IAAL,CAAUF,OAAV,CAAN;AACH;AACJ;AANwB;AAO5B;AAvCS;;AA0Cde,OAAOC,OAAP,GAAiBvB,OAAjB","file":"command.js","sourcesContent":["'use strict'\n// @flow\n\nconst ChildProcess = require('child_process')\n\nconst CliUtils = require('../cli/utils')\n\nclass Command {\n    childProcess: any\n    commands: Array<Array<string>>\n    cliUtils: CliUtils\n\n    constructor(childProcess: any, cliUtils: CliUtils) {\n        this.childProcess = childProcess\n        this.commands = [[], [], [], [], [], [], [], [], [], []]\n        this.cliUtils = cliUtils\n    }\n\n    addCommand(priority: number, command: string) {\n        this.commands[priority].push(command)\n    }\n\n    exec(command: string) {\n        return new Promise((resolve, reject) => {\n            this.cliUtils.message(command)\n            const child = this.childProcess.exec(command)\n            // child.stdout.pipe(process.stdout)\n            // child.stderr.pipe(process.stdout)\n            child.on('error', err => reject(err))\n            child.on('exit', (code, signal) => {\n                if (code) {\n                    reject(new Error(`error '${command}' is failed. ${code}`))\n                } else {\n                    resolve()\n                }\n            })\n        })\n    }\n\n    async execAll(cb: () => any) {\n        for (let commands of this.commands) {\n            for (let command of commands) {\n                cb && cb(command)\n                await this.exec(command)\n            }\n        }\n    }\n}\n\nmodule.exports = Command\n"]}