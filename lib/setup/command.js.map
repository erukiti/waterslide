{"version":3,"sources":["../../src/setup/command.js"],"names":["ChildProcess","require","Command","childProcess","commands","priority","command","push","Promise","resolve","reject","child","exec","on","err","code","signal","stdout","pipe","process","stderr","Error","cb","module","exports"],"mappings":"AAAA;;;;;;;;AAGA,IAAMA,eAAeC,QAAQ,eAAR,CAArB;;IAEMC,O;AAIF,qBAAYC,YAAZ,EAA+B;AAAA;;AAC3B,aAAKA,YAAL,GAAoBA,YAApB;AACA,aAAKC,QAAL,GAAgB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,CAAhB;AACH;;;;mCAEUC,Q,EAAkBC,O,EAAiB;AAC1C,iBAAKF,QAAL,CAAcC,QAAd,EAAwBE,IAAxB,CAA6BD,OAA7B;AACH;;;6BAEIA,O,EAAiB;AAAA;;AAClB,mBAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAMC,QAAQ,MAAKR,YAAL,CAAkBS,IAAlB,CAAuBN,OAAvB,CAAd;AACAK,sBAAME,EAAN,CAAS,OAAT,EAAkB;AAAA,2BAAOH,OAAOI,GAAP,CAAP;AAAA,iBAAlB;AACAH,sBAAME,EAAN,CAAS,MAAT,EAAiB,UAACE,IAAD,EAAOC,MAAP,EAAkB;AAC/B,wBAAID,IAAJ,EAAU;AACNJ,8BAAMM,MAAN,CAAaC,IAAb,CAAkBC,QAAQF,MAA1B;AACAN,8BAAMS,MAAN,CAAaF,IAAb,CAAkBC,QAAQF,MAA1B;;AAEAP,+BAAO,IAAIW,KAAJ,cAAoBf,OAApB,sBAA2CS,IAA3C,CAAP;AACH,qBALD,MAKO;AACHN;AACH;AACJ,iBATD;AAUH,aAbM,CAAP;AAcH;;;;kFAEaa,E;;;;;;;;;;;4CACW,KAAKlB,Q;;;;;;;;AAAjBA,wC;;;;;6CACeA,Q;;;;;;;;AAAXE,uC;;AACLgB,sCAAMA,GAAGhB,OAAH,CAAN;;uCACM,KAAKM,IAAL,CAAUN,OAAV,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMtBiB,OAAOC,OAAP,GAAiBtB,OAAjB","file":"command.js","sourcesContent":["'use strict'\n// @flow\n\nconst ChildProcess = require('child_process')\n\nclass Command {\n    childProcess: any\n    commands: Array<Array<string>>\n\n    constructor(childProcess: any) {\n        this.childProcess = childProcess\n        this.commands = [[], [], [], [], [], [], [], [], [], []]\n    }\n\n    addCommand(priority: number, command: string) {\n        this.commands[priority].push(command)\n    }\n\n    exec(command: string) {\n        return new Promise((resolve, reject) => {\n            const child = this.childProcess.exec(command)\n            child.on('error', err => reject(err))\n            child.on('exit', (code, signal) => {\n                if (code) {\n                    child.stdout.pipe(process.stdout)\n                    child.stderr.pipe(process.stdout)\n\n                    reject(new Error(`error '${command}' is failed. ${code}`))\n                } else {\n                    resolve()\n                }\n            })\n        })\n    }\n\n    async execAll(cb: () => any) {\n        for (let commands of this.commands) {\n            for (let command of commands) {\n                cb && cb(command)\n                await this.exec(command)\n            }\n        }\n    }\n}\n\nmodule.exports = Command\n"]}