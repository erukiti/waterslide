{"version":3,"sources":["../../src/setup/fsio.js"],"names":["path","require","mkdirp","fs","Fsio","cache","filename","content","opts","Promise","resolve","reject","buf","Buffer","equals","dirname","sync","options","mode","flag","isRewritable","writeFile","err","readFile","readFileSync","e","stat","module","exports"],"mappings":"AAAA;;;;;;AAGA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,KAAKF,QAAQ,IAAR,CAAX;;IAOMG,I;AAGF,oBAAc;AAAA;;AACV,aAAKC,KAAL,GAAa,EAAb;AACH;;;;kCAESC,Q,EAAkBC,O,EAAiD;AAAA;;AAAA,gBAAvBC,IAAuB,uEAAJ,EAAI;;AACzE,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,YAAJ;AACA,oBAAI,OAAOL,OAAP,KAAmB,QAAvB,EAAiC;AAC7BK,0BAAM,IAAIC,MAAJ,CAAWN,OAAX,CAAN;AACH,iBAFD,MAEO;AACHK,0BAAML,OAAN;AACH;;AAED,oBAAI,MAAKF,KAAL,CAAWC,QAAX,KAAwB,MAAKD,KAAL,CAAWC,QAAX,EAAqBQ,MAArB,CAA4BF,GAA5B,CAA5B,EAA8D;AAC1DF,4BAAQ,KAAR;AACA;AACH,iBAHD,MAGO;AACH,0BAAKL,KAAL,CAAWC,QAAX,IAAuBM,GAAvB;AACH;;AAED,oBAAIZ,KAAKe,OAAL,CAAaT,QAAb,MAA2B,GAA/B,EAAoC;AAChCJ,2BAAOc,IAAP,CAAYhB,KAAKe,OAAL,CAAaT,QAAb,CAAZ;AACH;;AAED,oBAAMW,UAAU,EAAhB;AACA,oBAAIT,KAAKU,IAAT,EAAe;AACXD,4BAAQC,IAAR,GAAeV,KAAKU,IAApB;AACH;AACDD,wBAAQE,IAAR,GAAeX,KAAKY,YAAL,GAAoB,GAApB,GAA0B,IAAzC;;AAEAjB,mBAAGkB,SAAH,CAAaf,QAAb,EAAuBM,GAAvB,EAA4BK,OAA5B,EAAqC,eAAO;AACxC,wBAAIK,GAAJ,EAAS;AACLX,+BAAOW,GAAP;AACH,qBAFD,MAEO;AACHZ,gCAAQ,IAAR;AACH;AACJ,iBAND;AAOH,aAhCM,CAAP;AAiCH;;;iCAEQJ,Q,EAAkB;AAAA;;AACvB,mBAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCR,mBAAGoB,QAAH,CAAYjB,QAAZ,EAAsB,UAACgB,GAAD,EAAMf,OAAN,EAAkB;AACpC,wBAAIe,GAAJ,EAAS;AACLX,+BAAOW,GAAP;AACH,qBAFD,MAEO;AACH,+BAAKjB,KAAL,CAAWC,QAAX,IAAuBC,OAAvB;AACAG,gCAAQH,OAAR;AACH;AACJ,iBAPD;AAQH,aATM,CAAP;AAUH;;;qCAEYD,Q,EAAkB;AAC3B,gBAAI;AACA,oBAAMC,UAAUJ,GAAGqB,YAAH,CAAgBlB,QAAhB,CAAhB;AACA,qBAAKD,KAAL,CAAWC,QAAX,IAAuBC,OAAvB;AACA,uBAAOA,OAAP;AACH,aAJD,CAIE,OAAOkB,CAAP,EAAU;AACR,uBAAO,IAAP;AACH;AACJ;;;oCAEWnB,Q,EAAkB;AAC1B,mBAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCR,mBAAGuB,IAAH,CAAQpB,QAAR,EAAkB,UAACgB,GAAD,EAAMI,IAAN,EAAe;AAC7B,wBAAIJ,GAAJ,EAAS;AACLZ,gCAAQ,KAAR;AACH,qBAFD,MAEO;AACHA,gCAAQ,IAAR;AACH;AACJ,iBAND;AAOH,aARM,CAAP;AASH;;;;;;AAGLiB,OAAOC,OAAP,GAAiBxB,IAAjB","file":"fsio.js","sourcesContent":["'use strict'\n// @flow\n\nconst path = require('path')\nconst mkdirp = require('mkdirp')\nconst fs = require('fs')\n\nexport type FsioOption = {\n    mode?: number,\n    isRewritable?: boolean\n}\n\nclass Fsio {\n    cache: {[string]: Buffer}\n\n    constructor() {\n        this.cache = {}\n    }\n\n    writeFile(filename: string, content: string | Buffer, opts: FsioOption = {}) {\n        return new Promise((resolve, reject) => {\n            let buf\n            if (typeof content === 'string') {\n                buf = new Buffer(content)\n            } else {\n                buf = content\n            }\n\n            if (this.cache[filename] && this.cache[filename].equals(buf)) {\n                resolve(false)\n                return\n            } else {\n                this.cache[filename] = buf\n            }\n\n            if (path.dirname(filename) !== '.') {\n                mkdirp.sync(path.dirname(filename))\n            }\n\n            const options = {}\n            if (opts.mode) {\n                options.mode = opts.mode\n            }\n            options.flag = opts.isRewritable ? 'w' : 'wx'\n\n            fs.writeFile(filename, buf, options, err => {\n                if (err) {\n                    reject(err)\n                } else {\n                    resolve(true)\n                }\n            })\n        })\n    }\n\n    readFile(filename: string) {\n        return new Promise((resolve, reject) => {\n            fs.readFile(filename, (err, content) => {\n                if (err) {\n                    reject(err)\n                } else {\n                    this.cache[filename] = content\n                    resolve(content)\n                }\n            })\n        })\n    }\n\n    readFileSync(filename: string) {\n        try {\n            const content = fs.readFileSync(filename)\n            this.cache[filename] = content\n            return content\n        } catch (e) {\n            return null\n        }\n    }\n\n    checkExists(filename: string) {\n        return new Promise((resolve, reject) => {\n            fs.stat(filename, (err, stat) => {\n                if (err) {\n                    resolve(false)\n                } else {\n                    resolve(true)\n                }\n            })\n        })\n    }\n}\n\nmodule.exports = Fsio\n"]}