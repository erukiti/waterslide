{"version":3,"sources":["../../src/setup/fsio.test.js"],"names":["test","require","fs","path","Fsio","temp","before","mkdtempSync","beforeEach","process","chdir","serial","t","fsio","writeFile","true","readFileSync","toString","cache","Buffer","throws","mode","writeFileSync","filename","join","cwd","dirname","readFile","content","checkExists","false"],"mappings":"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","file":"fsio.test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst fs = require('fs')\nconst path = require('path')\n\nconst Fsio = require('./fsio')\n\nlet temp = ''\n\ntest.before(t => {\n    temp = fs.mkdtempSync('/tmp/ws-')\n})\n\ntest.beforeEach(t => {\n    process.chdir(fs.mkdtempSync(`${temp}/fsio-`))\n})\n\n// Must use test.serial for process.chdir.\n\ntest.serial('new file', async t => {\n    const fsio = new Fsio()\n    await fsio.writeFile('test', 'hoge')\n\n    t.true(fs.readFileSync('test').toString() === 'hoge')\n})\n\ntest.serial('new file with cache', async t => {\n    const fsio = new Fsio()\n    fsio.cache['test'] = new Buffer('hoge')\n    await fsio.writeFile('test', 'hoge')\n\n    t.throws(() => fs.readFileSync('test'), 'ENOENT: no such file or directory, open \\'test\\'')\n})\n\n\ntest.serial('new file with mode', async t => {\n    const fsio = new Fsio()\n    await fsio.writeFile('test', 'hoge', {mode: 0o777})\n\n    t.true(fs.readFileSync('test').toString() === 'hoge')\n})\n\ntest.serial('new file with already exists', t => {\n    fs.writeFileSync('test', 'foo')\n\n    const fsio = new Fsio()\n    t.throws(fsio.writeFile('test', 'hoge'), 'EEXIST: file already exists, open \\'test\\'')\n    t.true(fs.readFileSync('test').toString() === 'foo')\n})\n\ntest.serial('new file with mkdir', async t => {\n    const filename = 'hoge/fuga/test'\n    const fsio = new Fsio()\n    await fsio.writeFile(filename, 'hoge')\n\n    t.true(fs.readFileSync(filename).toString() === 'hoge')\n})\n\ntest.serial('new file with mkdir failed', async t => {\n    fs.writeFileSync('hoge', 'foo')\n\n    const filename = 'hoge/fuga/test'\n    const fsio = new Fsio()\n    t.throws(fsio.writeFile(filename, 'hoge'), `ENOTDIR: not a directory, mkdir '${path.join(process.cwd(), path.dirname(filename))}'`)\n})\n\ntest.serial('read file', async t => {\n    fs.writeFileSync('test', 'hoge')\n\n    const fsio = new Fsio()\n    const content = await fsio.readFile('test')\n    t.true(content.toString() === 'hoge')\n})\n\ntest.serial('read file with error', async t => {\n    const fsio = new Fsio()\n    t.throws(fsio.readFile('test'), 'ENOENT: no such file or directory, open \\'test\\'')\n})\n\ntest.serial('cheek file, not exists', async t => {\n    const fsio = new Fsio()\n    t.false(await fsio.checkExists('test'))\n})\n\ntest.serial('cheek file, not exists', async t => {\n    fs.writeFileSync('test', 'hoge')\n    const fsio = new Fsio()\n    t.true(await fsio.checkExists('test'))\n})\n"]}