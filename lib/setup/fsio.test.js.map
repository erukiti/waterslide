{"version":3,"sources":["../../src/setup/fsio.test.js"],"names":["test","require","fs","path","Fsio","temp","before","t","mkdtempSync","beforeEach","process","chdir","serial","fsio","writeFile","true","readFileSync","toString","cache","Buffer","throws","mode","writeFileSync","filename","join","cwd","dirname","content","readFile","false","checkExists"],"mappings":"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","file":"fsio.test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst fs = require('fs')\nconst path = require('path')\n\nconst Fsio = require('./fsio')\n\nlet temp = ''\n\ntest.before(t => {\n    temp = fs.mkdtempSync('/tmp/ws-')\n})\n\ntest.beforeEach(t => {\n    process.chdir(fs.mkdtempSync(`${temp}/fsio-`))\n})\n\n// Must use test.serial for process.chdir.\n\ntest.serial('new file', async t => {\n    const fsio = new Fsio()\n    await fsio.writeFile('test', 'hoge')\n\n    t.true(fs.readFileSync('test').toString() === 'hoge')\n})\n\ntest.serial('new file with cache', async t => {\n    const fsio = new Fsio()\n    fsio.cache['test'] = new Buffer('hoge')\n    await fsio.writeFile('test', 'hoge')\n\n    t.throws(() => fs.readFileSync('test'), 'ENOENT: no such file or directory, open \\'test\\'')\n})\n\n\ntest.serial('new file with mode', async t => {\n    const fsio = new Fsio()\n    await fsio.writeFile('test', 'hoge', {mode: 0o777})\n\n    t.true(fs.readFileSync('test').toString() === 'hoge')\n})\n\ntest.serial('new file with already exists', t => {\n    fs.writeFileSync('test', 'foo')\n\n    const fsio = new Fsio()\n    t.throws(fsio.writeFile('test', 'hoge'), 'EEXIST: file already exists, open \\'test\\'')\n    t.true(fs.readFileSync('test').toString() === 'foo')\n})\n\ntest.serial('new file with mkdir', async t => {\n    const filename = 'hoge/fuga/test'\n    const fsio = new Fsio()\n    await fsio.writeFile(filename, 'hoge')\n\n    t.true(fs.readFileSync(filename).toString() === 'hoge')\n})\n\ntest.serial('new file with mkdir failed', async t => {\n    fs.writeFileSync('hoge', 'foo')\n\n    const filename = 'hoge/fuga/test'\n    const fsio = new Fsio()\n    t.throws(fsio.writeFile(filename, 'hoge'), `ENOTDIR: not a directory, mkdir '${path.join(process.cwd(), path.dirname(filename))}'`)\n})\n\ntest.serial('read file', async t => {\n    fs.writeFileSync('test', 'hoge')\n\n    const fsio = new Fsio()\n    const content = await fsio.readFile('test')\n    t.true(content.toString() === 'hoge')\n})\n\ntest.serial('read file with error', async t => {\n    const fsio = new Fsio()\n    t.throws(fsio.readFile('test'), 'ENOENT: no such file or directory, open \\'test\\'')\n})\n\ntest.serial('cheek file, not exists', async t => {\n    const fsio = new Fsio()\n    t.false(await fsio.checkExists('test'))\n})\n\ntest.serial('cheek file, not exists', async t => {\n    fs.writeFileSync('test', 'hoge')\n    const fsio = new Fsio()\n    t.true(await fsio.checkExists('test'))\n})\n"]}