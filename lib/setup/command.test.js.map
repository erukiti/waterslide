{"version":3,"sources":["../../src/setup/command.test.js"],"names":["test","require","Command","MockChildProcess","onError","onExit","onStdoutPipe","onStderrPipe","command","child","on","event","listener","stdout","pipe","dest","stderr","exec","t","mockChildProcess","getChildProcess","p","true","err","Error","isThrow","catch","e","isStdout","isStderr","toString"],"mappings":"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","file":"command.test.js","sourcesContent":["const test = require('ava')\n\nconst Command = require('./command')\n\nclass MockChildProcess {\n    constructor() {\n        this.onError = null\n        this.onExit = null\n        this.onStdoutPipe = null\n        this.onStderrPipe = null\n        this.command = null\n\n        this.child = {\n            on: (event, listener) => {\n                switch (event) {\n                case 'error': {\n                    this.onError = listener\n                    break\n                }\n                case 'exit': {\n                    this.onExit = listener\n                    break\n                }\n                }\n            },\n            stdout: {pipe: (dest) => this.onStdoutPipe(dest)},\n            stderr: {pipe: (dest) => this.onStderrPipe(dest)},\n        }\n    }\n\n    getChildProcess() {\n        return {\n            exec: command => {\n                this.command = command\n                return this.child\n            }\n        }\n    }\n}\n\ntest('success', async t => {\n    const mockChildProcess = new MockChildProcess()\n    const command = new Command(mockChildProcess.getChildProcess())\n    const p = command.exec('hoge')\n\n    t.true(mockChildProcess.command === 'hoge')\n    mockChildProcess.onExit(0)\n    await p\n})\n\ntest('child error', async t => {\n    const err = new Error()\n    let isThrow = false\n\n    const mockChildProcess = new MockChildProcess()\n    const command = new Command(mockChildProcess.getChildProcess())\n    const p = command.exec('hoge').catch(e => {\n        isThrow = true\n        t.true(e === err)\n    })\n\n    t.true(mockChildProcess.command === 'hoge')\n    mockChildProcess.onError(err)\n    await p\n    t.true(isThrow)\n})\n\ntest('child failed exit', async t => {\n    const err = new Error()\n    let isThrow = false\n    let isStdout = false\n    let isStderr = false\n\n    const mockChildProcess = new MockChildProcess()\n    const command = new Command(mockChildProcess.getChildProcess())\n    const p = command.exec('hoge').catch(e => {\n        isThrow = true\n        t.true(e.toString() === 'Error: error \\'hoge\\' is failed. 1')\n    })\n\n    mockChildProcess.onStdoutPipe = () => {\n        isStdout = true\n    }\n    mockChildProcess.onStderrPipe = () => {\n        isStderr = true\n    }\n\n    t.true(mockChildProcess.command === 'hoge')\n    mockChildProcess.onExit(1)\n    await p\n    t.true(isThrow)\n    t.true(isStdout)\n    t.true(isStderr)\n})\n\n"]}