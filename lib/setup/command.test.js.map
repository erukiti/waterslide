{"version":3,"sources":["../../src/setup/command.test.js"],"names":["test","require","Command","MockChildProcess","constructor","onError","onExit","onStdoutPipe","onStderrPipe","command","child","on","event","listener","stdout","pipe","dest","stderr","getChildProcess","exec","t","mockChildProcess","p","true","err","Error","isThrow","catch","e","isStdout","isStderr","toString"],"mappings":"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","file":"command.test.js","sourcesContent":["const test = require('ava')\n\nconst Command = require('./command')\n\nclass MockChildProcess {\n    constructor() {\n        this.onError = null\n        this.onExit = null\n        this.onStdoutPipe = null\n        this.onStderrPipe = null\n        this.command = null\n\n        this.child = {\n            on: (event, listener) => {\n                switch (event) {\n                case 'error': {\n                    this.onError = listener\n                    break\n                }\n                case 'exit': {\n                    this.onExit = listener\n                    break\n                }\n                }\n            },\n            stdout: {pipe: (dest) => this.onStdoutPipe(dest)},\n            stderr: {pipe: (dest) => this.onStderrPipe(dest)},\n        }\n    }\n\n    getChildProcess() {\n        return {\n            exec: command => {\n                this.command = command\n                return this.child\n            }\n        }\n    }\n}\n\ntest('success', async t => {\n    const mockChildProcess = new MockChildProcess()\n    const command = new Command(mockChildProcess.getChildProcess())\n    const p = command.exec('hoge')\n\n    t.true(mockChildProcess.command === 'hoge')\n    mockChildProcess.onExit(0)\n    await p\n})\n\ntest('child error', async t => {\n    const err = new Error()\n    let isThrow = false\n\n    const mockChildProcess = new MockChildProcess()\n    const command = new Command(mockChildProcess.getChildProcess())\n    const p = command.exec('hoge').catch(e => {\n        isThrow = true\n        t.true(e === err)\n    })\n\n    t.true(mockChildProcess.command === 'hoge')\n    mockChildProcess.onError(err)\n    await p\n    t.true(isThrow)\n})\n\ntest('child failed exit', async t => {\n    const err = new Error()\n    let isThrow = false\n    let isStdout = false\n    let isStderr = false\n\n    const mockChildProcess = new MockChildProcess()\n    const command = new Command(mockChildProcess.getChildProcess())\n    const p = command.exec('hoge').catch(e => {\n        isThrow = true\n        t.true(e.toString() === 'Error: error \\'hoge\\' is failed. 1')\n    })\n\n    mockChildProcess.onStdoutPipe = () => {\n        isStdout = true\n    }\n    mockChildProcess.onStderrPipe = () => {\n        isStderr = true\n    }\n\n    t.true(mockChildProcess.command === 'hoge')\n    mockChildProcess.onExit(1)\n    await p\n    t.true(isThrow)\n    t.true(isStdout)\n    t.true(isStderr)\n})\n\n"]}