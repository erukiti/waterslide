{"version":3,"sources":["../../src/setup/index.js"],"names":["process","require","fs","getConfig","Plugin","config","plugin","Fsio","Command","Operator","CliUtils","Setup","constructor","cliUtils","fsio","command","projectDir","installers","generators","noOpt","noUse","isUse","postInstalls","directories","getLocal","entries","target","builders","testers","opt","info","operator","addBuilder","setProjectDir","name","setUse","setOpt","length","error","writeLocal","setNoOpt","setNoUse","install","processed","getNotProcessedKey","Object","keys","filter","includes","key","notProcessed","concat","Promise","all","map","cb","execAll","debug","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\n// @flow\n\nconst process = require('process')\nconst fs = require('fs')\n\nconst {getConfig, Plugin} = require('../waterslide')\nconst config = getConfig()\nconst plugin = new Plugin()\nconst Fsio = require('./fsio')\nconst Command = require('./command')\nconst Operator = require('./operator')\nconst CliUtils = require('../cli/utils')\n\nimport type {Entry} from '../config'\n\nexport interface Generator {\n    generate(name: string, opts?: Object): void\n}\n\n// FIXME\nexport type Installer = any\n\n// export interface Installer {\n//     install: () => {},\n//     setDirectory?: (path: string, description?: string) => void\n// }\n\ntype Info = {\n    title: string,\n    message: string\n}\n\n\nclass Setup {\n    fsio: Fsio\n    command: Command\n    cliUtils: CliUtils\n    projectDir: ?string\n    installers: {[string]: Installer}\n    noOpt: Array<string>\n    noUse: Array<string>\n    opt: Array<string>\n    isUse: boolean\n    postInstalls: Array<() => void>\n    directories: {[string]: string}\n    generators: {[string]: Generator}\n    entries: Array<Entry>\n    operator: Operator\n    target: ?string\n    builders: Array<string>\n    testers: {[string]: string}\n    info: Array<Info>\n\n    constructor(cliUtils: CliUtils) {\n        this.fsio = new Fsio()\n        this.cliUtils = cliUtils\n        this.command = new Command(require('child_process'), cliUtils)\n        this.projectDir = null // FIXME\n        this.installers = {}\n        this.generators = {}\n        this.noOpt = []\n        this.noUse = []\n        this.isUse = false\n\n        this.postInstalls = []\n\n        this.directories = config.getLocal('directories') || {}\n        this.entries = config.getLocal('entries') || []\n        this.target = config.getLocal('target')\n        this.builders = config.getLocal('builders') || []\n        this.testers = config.getLocal('testers') || {}\n        this.opt = config.getLocal('opt') || []\n        this.info = config.getLocal('info') || []\n\n        this.operator = new Operator(this)\n\n        this.operator.addBuilder('copy')\n    }\n\n    setProjectDir(name: string) {\n        this.projectDir = name\n    }\n\n    setUse() {\n        this.isUse = true\n    }\n\n    setOpt(opt: Array<string>) {\n        if (this.opt.length > 0) {\n            this.cliUtils.error('warning: opt is already set.')\n        }\n\n        this.opt = opt\n        config.writeLocal('opt', this.opt)\n    }\n\n    setNoOpt(noOpt: Array<string>) {\n        if (this.noOpt.length > 0) {\n            this.cliUtils.error('warning: noOpts is already set.')\n        }\n\n        this.noOpt = noOpt\n    }\n\n    setNoUse(noUse: Array<string>) {\n        if (this.noUse.length > 0) {\n            this.cliUtils.error('warning: noUse is already set.')\n        }\n\n        this.noUse = noUse\n    }\n\n    async install() {\n        let processed = []\n\n        const getNotProcessedKey = () => Object.keys(this.installers).filter(key => !processed.includes(key))\n\n        let notProcessed\n        while ((notProcessed = getNotProcessedKey()).length > 0) {\n            for (let key of notProcessed) {\n                await this.installers[key].install()\n            }\n            processed = processed.concat(notProcessed)\n        }\n\n        await Promise.all(this.postInstalls.map(cb => cb()))\n\n        await this.command.execAll(command => this.cliUtils.debug(`${command} is installed`))\n    }\n}\n\nmodule.exports = Setup\n"]}