{"version":3,"sources":["../../src/cli/install.js"],"names":["generateName","require","process","path","fs","Setup","Plugin","config","CliUtils","install","cliUtils","argv","startLocal","setup","parseOpt","name","setOpt","setNoOpt","pluginNames","operator","getInstaller","installer","error","catch","console","dir","e","message","installCommand","command","describe","builder","yargs","option","type","handler","isExists","log","exit","verbose","debug","module","exports"],"mappings":"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","file":"install.js","sourcesContent":["'use strict'\n// @flow\n\nconst generateName = require('sillyname')\nconst process = require('process')\nconst path = require('path')\nconst fs = require('fs')\n\nconst Setup = require('../setup')\nconst Plugin = require('../plugin')\nconst config = require('../config')\nconst CliUtils = require('./utils')\n\nconst install = async (cliUtils: CliUtils, argv) => {\n    config.startLocal()\n\n    const setup = new Setup(cliUtils)\n\n    const parseOpt = name => {\n        if (!argv[name]) {\n            return []\n        } else if (typeof argv[name] === 'string') {\n            return [argv[name]]\n        } else {\n            return argv[name]\n        }\n    }\n\n    setup.setOpt(parseOpt('opt'))\n    setup.setNoOpt(parseOpt('noOpt'))\n\n    for (let name of argv.pluginNames) {\n        const installer = await setup.operator.getInstaller(name)\n        if (!installer) {\n            cliUtils.error(`${name} is not installed. already installed or installing file is already exists.`)\n        }\n    }\n\n    await setup.install().catch(e => console.dir(e))\n    cliUtils.message('install finish.')\n}\n\nconst installCommand = () => {\n    return {\n        command: 'install [options] <pluginNames...>',\n        describe: 'install to project',\n        builder: (yargs: Object) => {\n            yargs\n                .option('opt', {\n                    describe: 'set option',\n                    type: 'string'\n                })\n                .option('no-opt', {\n                    describe: 'disable option',\n                    type: 'string'\n                })\n        },\n        handler: (argv: Object) => {\n            if (!config.isExists()) {\n                console.log('If you want to install, you need to setup waterslide')\n                process.exit(1)\n            }\n\n            const cliUtils = new CliUtils({verbose: argv.verbose, debug: argv.debug})\n            install(cliUtils, argv).catch(e => console.dir(e))\n        }\n    }\n}\n\nmodule.exports = installCommand\n"]}