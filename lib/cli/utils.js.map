{"version":3,"sources":["../../src/cli/utils.js"],"names":["path","require","process","CliUtils","opts","verbose","debug","isVerbose","isDebug","isMessage","isError","isWarning","latestLength","depth","reStackTrace","n","Error","stack","result","exec","join","basename","dirname","stdoutWrite","stdout","write","stderrWrite","stderr","exit","rotateIndex","timer","setInterval","indicator","substr","apply","_reset","clearInterval","repeat","mesg","header","caller","_getCaller","console","log","length","_hook","module","exports"],"mappings":"AAAA;;;;;;AAGA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,UAAUD,QAAQ,SAAR,CAAhB;;IAOME,Q;AAQF,wBAAyD;AAAA,YAA7CC,IAA6C,uEAAhC,EAACC,SAAS,KAAV,EAAiBC,OAAO,KAAxB,EAAgC;;AAAA;;AACrD,aAAKC,SAAL,GAAiBH,KAAKC,OAAL,IAAgBD,KAAKE,KAAtC;AACA,aAAKE,OAAL,GAAeJ,KAAKE,KAApB;AACA,aAAKG,SAAL,GAAiB,IAAjB;AACA,aAAKC,OAAL,GAAe,IAAf;AACA,aAAKC,SAAL,GAAiB,IAAjB;;AAEA,aAAKC,YAAL,GAAoB,CAApB;AACH;;;;mCAEUC,K,EAAe;AACtB,gBAAMC,eAAe,kCAArB;;AAEA,gBAAIC,IAAIF,QAAQ,CAAhB;;AAHsB,uBAKN,IAAIG,KAAJ,EALM;AAAA,gBAKfC,KALe,QAKfA,KALe;;AAMtB,gBAAIC,eAAJ;AACA,mBAAO,CAACA,SAASJ,aAAaK,IAAb,CAAkBF,KAAlB,CAAV,MAAwC,IAA/C,EAAqD;AACjD,oBAAI,EAAEF,CAAF,IAAO,CAAX,EAAc;AACV,2BAAOf,KAAKoB,IAAL,CAAUpB,KAAKqB,QAAL,CAAcrB,KAAKsB,OAAL,CAAaJ,OAAO,CAAP,CAAb,CAAd,CAAV,EAAkDlB,KAAKqB,QAAL,CAAcH,OAAO,CAAP,CAAd,CAAlD,CAAP;AACH;AACJ;AACD,mBAAO,EAAP;AACH;;;gCAEO;AAAA;;AACJ,gBAAMK,cAAcrB,QAAQsB,MAAR,CAAeC,KAAnC;AACA,gBAAMC,cAAcxB,QAAQyB,MAAR,CAAeF,KAAnC;AACA,gBAAMG,OAAO1B,QAAQ0B,IAArB;;AAEA,gBAAIC,cAAc,CAAlB;;AAEA;AACA,gBAAIC,QAAQC,YAAY,YAAM;AAC1B,oBAAMC,YAAY,QAAQC,MAAR,CAAeJ,WAAf,EAA4B,CAA5B,CAAlB;AACA,oBAAI,EAAEA,WAAF,IAAiB,CAArB,EAAwB;AACpBA,kCAAc,CAAd;AACH;;AAEDN,4BAAYW,KAAZ,CAAkBhC,QAAQsB,MAA1B,EAAkC,CAAIQ,SAAJ,QAAlC;AACH,aAPW,EAOT,EAPS,CAAZ;;AASA,gBAAMG,SAAS,SAATA,MAAS,GAAM;AACjBC,8BAAcN,KAAd;AACA5B,wBAAQsB,MAAR,CAAeC,KAAf,GAAuBF,WAAvB;AACArB,wBAAQyB,MAAR,CAAeF,KAAf,GAAuBC,WAAvB;AACAxB,wBAAQ0B,IAAR,GAAeA,IAAf;AACA,oBAAI,MAAKhB,YAAL,GAAoB,CAAxB,EAA2B;AACvBV,4BAAQsB,MAAR,CAAeC,KAAf,CAAwB,IAAIY,MAAJ,CAAW,MAAKzB,YAAhB,CAAxB;AACA,0BAAKA,YAAL,GAAoB,CAApB;AACH;AACJ,aATD;;AAWAV,oBAAQ0B,IAAR,GAAe,YAAa;AACxBO;AACAjC,wBAAQ0B,IAAR;AACH,aAHD;;AAKA1B,oBAAQsB,MAAR,CAAeC,KAAf,GAAuB,YAAa;AAAA;;AAChCU;AACA,2CAAQX,MAAR,EAAeC,KAAf;AACH,aAHD;;AAKAvB,oBAAQyB,MAAR,CAAeF,KAAf,GAAuB,YAAa;AAAA;;AAChCU;AACA,2CAAQR,MAAR,EAAeF,KAAf;AACH,aAHD;AAIH;;AAED;;;;;;;;kCAK8C;AAAA,gBAAtCa,IAAsC,uEAAvB,EAAuB;AAAA,gBAAnBzB,KAAmB,uEAAH,CAAG;;AAC1C,gBAAI0B,SAAS,EAAb;AACA,gBAAMC,SAAS,KAAKC,UAAL,CAAgB5B,QAAQ,CAAxB,CAAf;AACA,gBAAI,KAAKL,OAAL,IAAgBgC,MAApB,EAA4B;AACxBD,sCAAoBC,MAApB;AACH,aAFD,MAEO;AACHD,yBAAS,SAAT;AACH;;AAED,gBAAI,KAAKhC,SAAT,EAAoB;AAChBmC,wBAAQC,GAAR,cAAuBJ,MAAvB,gBAAwCD,IAAxC;AACH,aAFD,MAEO;AACHpC,wBAAQsB,MAAR,CAAeC,KAAf,QAA0Ba,IAA1B;AACA,qBAAK1B,YAAL,GAAoB0B,KAAKM,MAAL,GAAc,CAAlC;AACA,qBAAKC,KAAL;AACH;AACJ;;AAED;;;;;;;;gCAK4C;AAAA,gBAAtCP,IAAsC,uEAAvB,EAAuB;AAAA,gBAAnBzB,KAAmB,uEAAH,CAAG;;AACxC,gBAAI,KAAKL,OAAT,EAAkB;AACd,oBAAM+B,oBAAkB,KAAKE,UAAL,CAAgB5B,QAAQ,CAAxB,CAAxB;AACA6B,wBAAQC,GAAR,cAAuBJ,MAAvB,gBAAwCD,IAAxC;AACH;AACJ;;AAED;;;;;;;;kCAK8C;AAAA,gBAAtCA,IAAsC,uEAAvB,EAAuB;AAAA,gBAAnBzB,KAAmB,uEAAH,CAAG;;AAC1C,gBAAI,KAAKJ,SAAT,EAAoB;AAChB,oBAAI8B,SAAS,EAAb;AACA,oBAAI,KAAK/B,OAAT,EAAkB;AACdkC,4BAAQC,GAAR,cAAuB,KAAKF,UAAL,CAAgB5B,QAAQ,CAAxB,CAAvB,gBAA4DyB,IAA5D;AACH,iBAFD,MAEO;AACHI,4BAAQC,GAAR,CAAYL,IAAZ;AACH;AACJ;AACJ;;AAED;;;;;;;;kCAK8C;AAAA,gBAAtCA,IAAsC,uEAAvB,EAAuB;AAAA,gBAAnBzB,KAAmB,uEAAH,CAAG;;AAC1C,gBAAI,KAAKF,SAAT,EAAoB;AAChB,oBAAI4B,SAAS,EAAb;AACA,oBAAI,KAAK/B,OAAT,EAAkB;AACd+B,0CAAoB,KAAKE,UAAL,CAAgB5B,QAAQ,CAAxB,CAApB;AACH,iBAFD,MAEO;AACH0B,6BAAS,SAAT;AACH;AACDG,wBAAQC,GAAR,cAAuBJ,MAAvB,gBAAwCD,IAAxC;AACH;AACJ;;;gCAE2C;AAAA,gBAAtCA,IAAsC,uEAAvB,EAAuB;AAAA,gBAAnBzB,KAAmB,uEAAH,CAAG;;AACxC,gBAAI,KAAKH,OAAT,EAAkB;AACd,oBAAI6B,SAAS,EAAb;AACA,oBAAI,KAAK/B,OAAT,EAAkB;AACd+B,wCAAkB,KAAKE,UAAL,CAAgB5B,QAAQ,CAAxB,CAAlB;AACH,iBAFD,MAEO;AACH0B,6BAAS,OAAT;AACH;AACDG,wBAAQC,GAAR,cAAuBJ,MAAvB,gBAAwCD,IAAxC;AACH;AACJ;;;;;;AAILQ,OAAOC,OAAP,GAAiB5C,QAAjB","file":"utils.js","sourcesContent":["'use strict'\n// @flow\n\nconst path = require('path')\nconst process = require('process')\n\ntype Opts = {\n    verbose: boolean,\n    debug: boolean,\n}\n\nclass CliUtils {\n    isVerbose: boolean\n    isDebug: boolean\n    isMessage: boolean\n    isError: boolean\n    isWarning: boolean\n    latestLength: number\n\n    constructor(opts: Opts = {verbose: false, debug: false}) {\n        this.isVerbose = opts.verbose || opts.debug\n        this.isDebug = opts.debug\n        this.isMessage = true\n        this.isError = true\n        this.isWarning = true\n\n        this.latestLength = 0\n    }\n\n    _getCaller(depth: number) {\n        const reStackTrace = /at .+ \\(([^:]+:[0-9]+:[0-9]+)\\)/g\n\n        let n = depth + 2\n\n        const {stack} = new Error()\n        let result\n        while ((result = reStackTrace.exec(stack)) !== null) {\n            if (--n <= 0) {\n                return path.join(path.basename(path.dirname(result[1])), path.basename(result[1]))\n            }\n        }\n        return ''\n    }\n\n    _hook() {\n        const stdoutWrite = process.stdout.write\n        const stderrWrite = process.stderr.write\n        const exit = process.exit\n\n        let rotateIndex = 0\n\n        // Fixme: it can not be stopped while using hooks because it uses setInterval.\n        let timer = setInterval(() => {\n            const indicator = '|/-\\\\'.substr(rotateIndex, 1)\n            if (++rotateIndex >= 4) {\n                rotateIndex = 0\n            }\n\n            stdoutWrite.apply(process.stdout, [`${indicator}\\r`])\n        }, 50)\n\n        const _reset = () => {\n            clearInterval(timer)\n            process.stdout.write = stdoutWrite\n            process.stderr.write = stderrWrite\n            process.exit = exit\n            if (this.latestLength > 0) {\n                process.stdout.write(`${' '.repeat(this.latestLength)}\\r`)\n                this.latestLength = 0\n            }\n        }\n\n        process.exit = (...args) => {\n            _reset()\n            process.exit(...args)\n        }\n\n        process.stdout.write = (...args) => {\n            _reset()\n            process.stdout.write(...args)\n        }\n\n        process.stderr.write = (...args) => {\n            _reset()\n            process.stderr.write(...args)\n        }\n    }\n\n    /**\n     *\n     * @param {string} [mesg]\n     * @param {number} [depth]\n     */\n    verbose(mesg: string = '', depth: number = 0) {\n        let header = ''\n        const caller = this._getCaller(depth + 1)\n        if (this.isDebug && caller) {\n            header = `verbose ${caller}`\n        } else {\n            header = 'verbose'\n        }\n\n        if (this.isVerbose) {\n            console.log(`\\x1b[33m${header}:\\x1b[m ${mesg}`)\n        } else {\n            process.stdout.write(`  ${mesg}\\r`)\n            this.latestLength = mesg.length + 2\n            this._hook()\n        }\n    }\n\n    /**\n     *\n     * @param {string} [mesg]\n     * @param {number} [depth]\n     */\n    debug(mesg: string = '', depth: number = 0) {\n        if (this.isDebug) {\n            const header = `debug ${this._getCaller(depth + 1)}`\n            console.log(`\\x1b[36m${header}:\\x1b[m ${mesg}`)\n        }\n    }\n\n    /**\n     *\n     * @param {string} [mesg]\n     * @param {number} [depth]\n     */\n    message(mesg: string = '', depth: number = 0) {\n        if (this.isMessage) {\n            let header = ''\n            if (this.isDebug) {\n                console.log(`\\x1b[32m${this._getCaller(depth + 1)}\\x1b[m: ${mesg}`)\n            } else {\n                console.log(mesg)\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {string} [mesg]\n     * @param {number} [depth]\n     */\n    warning(mesg: string = '', depth: number = 0) {\n        if (this.isWarning) {\n            let header = ''\n            if (this.isDebug) {\n                header = `warning ${this._getCaller(depth + 1)}`\n            } else {\n                header = 'warning'\n            }\n            console.log(`\\x1b[33m${header}:\\x1b[m ${mesg}`)\n        }\n    }\n\n    error(mesg: string = '', depth: number = 0) {\n        if (this.isError) {\n            let header = ''\n            if (this.isDebug) {\n                header = `error ${this._getCaller(depth + 1)}`\n            } else {\n                header = 'error'\n            }\n            console.log(`\\x1b[33m${header}:\\x1b[m ${mesg}`)\n        }\n    }\n\n}\n\nmodule.exports = CliUtils\n"]}