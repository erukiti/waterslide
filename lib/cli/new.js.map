{"version":3,"sources":["../../src/cli/new.js"],"names":["generateName","require","process","path","fs","Setup","Plugin","config","CliUtils","setupProject","cliUtils","argv","projectType","message","projectDir","projectName","indexOf","error","exit","mkdirSync","chdir","startLocal","toLowerCase","replace","writeLocal","setup","setProjectDir","parseOpt","name","noUse","setNoUse","setOpt","setNoOpt","envs","filter","includes","v","operator","getNoOpt","forEach","push","plugin","Klass","requireProject","obj","getInstaller","install","catch","console","dir","e","newCommand","command","describe","builder","yargs","option","type","handler","verbose","debug","module","exports"],"mappings":"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","file":"new.js","sourcesContent":["'use strict'\n// @flow\n\nconst generateName = require('sillyname')\nconst process = require('process')\nconst path = require('path')\nconst fs = require('fs')\n\nconst Setup = require('../setup')\nconst Plugin = require('../plugin')\nconst config = require('../config')\nconst CliUtils = require('./utils')\n\nconst setupProject = async (cliUtils: CliUtils, argv) => {\n    const projectType = argv.projectType\n\n    cliUtils.message(`create a new project of ${projectType}`)\n\n    let projectDir = null\n    let projectName = null\n\n    if (argv.projectDir) {\n        projectDir = argv.projectDir\n        if (projectDir.indexOf('/') !== -1 || projectDir === '.' || projectDir === '..') {\n            cliUtils.error('invalid projectDir.')\n            process.exit(1)\n        }\n\n        projectName = projectDir\n        fs.mkdirSync(projectDir)\n        process.chdir(projectDir)\n        config.startLocal()\n    } else {\n        projectName = generateName()\n        projectDir = projectName.toLowerCase().replace(' ', '-')\n        fs.mkdirSync(projectDir)\n        cliUtils.message(`directory \\x1b[32m${projectDir}\\x1b[m was created.`)\n        process.chdir(projectDir)\n        config.startLocal()\n        config.writeLocal('sillyname', projectDir)\n    }\n\n    const setup = new Setup(cliUtils)\n    setup.setProjectDir(projectDir)\n\n    const parseOpt = name => {\n        if (!argv[name]) {\n            return []\n        } else if (typeof argv[name] === 'string') {\n            return [argv[name]]\n        } else {\n            return argv[name]\n        }\n    }\n\n    const noUse = parseOpt('noUse')\n    setup.setNoUse(noUse)\n\n    setup.setOpt(parseOpt('opt'))\n    setup.setNoOpt(parseOpt('noOpt'))\n\n    const envs = parseOpt('use').filter(v => !noUse.includes(v))\n\n    if (!setup.operator.getNoOpt().includes('recommend')) {\n        ['editorconfig', 'git'].filter(v => !noUse.includes(v)).forEach(v => {\n            envs.push(v)\n        })\n    }\n\n    const plugin = new Plugin()\n    const Klass = plugin.requireProject(projectType)\n    const obj = new Klass(setup.operator)\n\n    for (let name of envs) {\n        await setup.operator.getInstaller(name)\n    }\n\n    await obj.install()\n\n    await setup.install().catch(e => console.dir(e))\n\n    cliUtils.message()\n    cliUtils.message(`  project \\x1b[32m${projectDir}\\x1b[m was created.`)\n    cliUtils.message(`  see. \\x1b[36m${projectDir}/README.md\\x1b[m`)\n}\n\nconst newCommand = () => {\n    return {\n        command: 'new <projectType> [projectDir]',\n        describe: 'create a new project',\n        builder: (yargs: Object) => {\n            yargs\n                .option('use', {\n                    describe: 'use install plugin',\n                    type: 'string'\n                })\n                .option('no-use', {\n                    describe: 'disable install plugin',\n                    type: 'string'\n                })\n                .option('opt', {\n                    describe: 'set option',\n                    type: 'string'\n                })\n                .option('no-opt', {\n                    describe: 'disable option',\n                    type: 'string'\n                })\n        },\n        handler: (argv: Object) => {\n            const cliUtils = new CliUtils({verbose: argv.verbose, debug: argv.debug})\n            setupProject(cliUtils, argv).catch(e => console.dir(e))\n        }\n    }\n}\n\nmodule.exports = newCommand\n"]}