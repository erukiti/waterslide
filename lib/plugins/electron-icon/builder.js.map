{"version":3,"sources":["../../../src/plugins/electron-icon/builder.js"],"names":["fs","require","mkdirp","path","Plugin","plugin","icongen","requireLocal","Jimp","ElectronIconBuilder","constructor","builder","src","getDirectory","dest","isCompiled","getTypes","_run","entries","Promise","all","map","entry","temp","mkdtempSync","read","then","image","resolve","reject","clone","resize","size","write","join","dirname","replace","name","basename","type","modes","names","ico","icns","compiled","run","catch","e","console","dir","watch","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,MAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,MAAME,OAAOF,QAAQ,MAAR,CAAb;;AAEA,MAAM,EAACG,MAAD,KAAWH,QAAQ,kBAAR,CAAjB;AACA,MAAMI,SAAS,IAAID,MAAJ,EAAf;AACA,MAAME,UAAUD,OAAOE,YAAP,CAAoB,UAApB,CAAhB;AACA,MAAMC,OAAOH,OAAOE,YAAP,CAAoB,MAApB,CAAb;;AAEA,MAAME,mBAAN,CAA0B;AACtBC,gBAAYC,OAAZ,EAAqB;AACjB,aAAKA,OAAL,GAAeA,OAAf;AACA,aAAKC,GAAL,GAAWD,QAAQE,YAAR,CAAqB,QAArB,CAAX;AACA,aAAKC,IAAL,GAAYH,QAAQE,YAAR,CAAqB,aAArB,CAAZ;AACA,aAAKE,UAAL,GAAkB,KAAlB;AACH;;AAEDC,eAAW;AACP,eAAO,CAAC,eAAD,CAAP;AACH;;AAEKC,QAAN,CAAWC,OAAX,EAAoB;AAAA;;AAAA;AAChB,kBAAMC,QAAQC,GAAR,CAAYF,QAAQG,GAAR;AAAA,6CAAY,WAAMC,KAAN,EAAe;AACzC,0BAAMC,OAAOvB,GAAGwB,WAAH,CAAe,UAAf,CAAb;AACA,0BAAMhB,KAAKiB,IAAL,CAAUH,MAAMnB,IAAhB,EAAsBuB,IAAtB;AAAA,sDAA2B,WAAMC,KAAN,EAAe;AAC5C,kCAAMR,QAAQC,GAAR,CAAY,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,IAApC,EAA0CC,GAA1C,CAA8C,gBAAQ;AACpE,uCAAO,IAAIF,OAAJ,CAAY,UAACS,OAAD,EAAUC,MAAV,EAAqB;AACpCF,0CAAMG,KAAN,GAAcC,MAAd,CAAqBC,IAArB,EAA2BA,IAA3B,EAAiCC,KAAjC,CAAuC9B,KAAK+B,IAAL,CAAUX,IAAV,EAAiB,GAAES,IAAK,MAAxB,CAAvC,EAAuE,YAAM;AACzEJ;AACH,qCAFD;AAGH,iCAJM,CAAP;AAKH,6BANiB,CAAZ,CAAN;AAOH,yBARK;;AAAA;AAAA;AAAA;AAAA,yBAAN;;AAUA,0BAAMd,OAAOX,KAAKgC,OAAL,CAAab,MAAMnB,IAAN,CAAWiC,OAAX,CAAmB,MAAKxB,GAAxB,EAA6B,MAAKE,IAAlC,CAAb,CAAb;AACA,0BAAMuB,OAAOlC,KAAKmC,QAAL,CAAchB,MAAMnB,IAApB,EAA0B,MAA1B,CAAb;;AAEA,2BAAOG,QAAQiB,IAAR,EAAcT,IAAd,EAAoB;AACvByB,8BAAM,KADiB;AAEvBC,+BAAO,CAAC,KAAD,EAAQ,MAAR,CAFgB;AAGvBC,+BAAO,EAACC,KAAKL,IAAN,EAAYM,MAAMN,IAAlB;AAHgB,qBAApB,CAAP;AAKH,iBApBiB;;AAAA;AAAA;AAAA;AAAA,iBAAZ,CAAN;;AAsBA,kBAAKtB,UAAL,GAAkB,IAAlB;AACA,kBAAKJ,OAAL,CAAaiC,QAAb;AAxBgB;AAyBnB;;AAEDC,QAAI3B,OAAJ,EAAa;AACT,aAAKD,IAAL,CAAUC,OAAV,EAAmB4B,KAAnB,CAAyBC,KAAKC,QAAQC,GAAR,CAAYF,CAAZ,CAA9B;AACH;;AAEDG,UAAMhC,OAAN,EAAe;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AAnDqB;;AAsD1BiC,OAAOC,OAAP,GAAiB3C,mBAAjB","file":"builder.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst mkdirp = require('mkdirp')\nconst path = require('path')\n\nconst {Plugin} = require('../../waterslide')\nconst plugin = new Plugin()\nconst icongen = plugin.requireLocal('icon-gen')\nconst Jimp = plugin.requireLocal('jimp')\n\nclass ElectronIconBuilder {\n    constructor(builder) {\n        this.builder = builder\n        this.src = builder.getDirectory('source')\n        this.dest = builder.getDirectory('destination')\n        this.isCompiled = false\n    }\n\n    getTypes() {\n        return ['electron-icon']\n    }\n\n    async _run(entries) {\n        await Promise.all(entries.map(async entry => {\n            const temp = fs.mkdtempSync('/tmp/ws-')\n            await Jimp.read(entry.path).then(async image => {\n                await Promise.all([16, 24, 32, 48, 64, 128, 256, 512, 1024].map(size => {\n                    return new Promise((resolve, reject) => {\n                        image.clone().resize(size, size).write(path.join(temp, `${size}.png`), () => {\n                            resolve()\n                        })\n                    })\n                }))\n            })\n\n            const dest = path.dirname(entry.path.replace(this.src, this.dest))\n            const name = path.basename(entry.path, '.png')\n\n            return icongen(temp, dest, {\n                type: 'png',\n                modes: ['ico', 'icns'],\n                names: {ico: name, icns: name}\n            })\n        }))\n\n        this.isCompiled = true\n        this.builder.compiled()\n    }\n\n    run(entries) {\n        this._run(entries).catch(e => console.dir(e))\n    }\n\n    watch(entries) {\n        // this._run(entries).forEach(filepath => {\n        //     fs.watch(filepath, (event, filename) => {\n        //         this._copy(filepath)\n        //         this.isCompiled = true\n        //         this.builder.compiled()\n        //     })\n        // })\n    }\n}\n\nmodule.exports = ElectronIconBuilder\n"]}