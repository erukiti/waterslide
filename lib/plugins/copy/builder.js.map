{"version":3,"sources":["../../../src/plugins/copy/builder.js"],"names":["fs","require","mkdirp","path","CopyBuilder","constructor","builder","src","getDirectory","dest","isCompiled","getTypes","_copy","reSrc","RegExp","replace","debug","sync","dirname","createReadStream","pipe","createWriteStream","_run","entries","files","map","entry","verbose","join","forEach","filepath","compiled","run","watch","event","filename","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,MAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,MAAME,OAAOF,QAAQ,MAAR,CAAb;;AAEA,MAAMG,WAAN,CAAkB;AACdC,gBAAYC,OAAZ,EAAqB;AACjB,aAAKA,OAAL,GAAeA,OAAf;AACA,aAAKC,GAAL,GAAWD,QAAQE,YAAR,CAAqB,QAArB,CAAX;AACA,aAAKC,IAAL,GAAYH,QAAQE,YAAR,CAAqB,aAArB,CAAZ;AACA,aAAKE,UAAL,GAAkB,KAAlB;AACH;;AAEDC,eAAW;AACP,eAAO,CAAC,MAAD,CAAP;AACH;;AAEDC,UAAML,GAAN,EAAW;AACP,cAAMM,QAAQ,IAAIC,MAAJ,CAAY,IAAG,KAAKP,GAAI,GAAxB,CAAd;;AAEA,cAAME,OAAOF,IAAIQ,OAAJ,CAAYF,KAAZ,EAAoB,GAAE,KAAKJ,IAAK,GAAhC,CAAb;;AAEA,aAAKH,OAAL,CAAaU,KAAb,CAAoB,SAAQT,GAAI,OAAME,IAAK,EAA3C;;AAEAP,eAAOe,IAAP,CAAYd,KAAKe,OAAL,CAAaT,IAAb,CAAZ;AACAT,WAAGmB,gBAAH,CAAoBZ,GAApB,EAAyBa,IAAzB,CAA8BpB,GAAGqB,iBAAH,CAAqBZ,IAArB,CAA9B;AACH;;AAEDa,SAAKC,OAAL,EAAc;AACV,cAAMC,QAAQD,QAAQE,GAAR,CAAYC,SAASA,MAAMvB,IAA3B,CAAd;;AAEA,aAAKG,OAAL,CAAaqB,OAAb,CAAsB,iBAAgBH,MAAMI,IAAN,CAAW,IAAX,CAAiB,EAAvD;;AAEAJ,cAAMK,OAAN,CAAcC,YAAY;AACtB,iBAAKlB,KAAL,CAAWkB,QAAX;AACH,SAFD;;AAIA,aAAKpB,UAAL,GAAkB,IAAlB;AACA,aAAKJ,OAAL,CAAayB,QAAb;;AAEA,eAAOP,KAAP;AACH;;AAEDQ,QAAIT,OAAJ,EAAa;AACT,aAAKD,IAAL,CAAUC,OAAV;AACH;;AAEDU,UAAMV,OAAN,EAAe;AACX,aAAKD,IAAL,CAAUC,OAAV,EAAmBM,OAAnB,CAA2BC,YAAY;AACnC9B,eAAGiC,KAAH,CAASH,QAAT,EAAmB,CAACI,KAAD,EAAQC,QAAR,KAAqB;AACpC,qBAAKvB,KAAL,CAAWkB,QAAX;AACA,qBAAKpB,UAAL,GAAkB,IAAlB;AACA,qBAAKJ,OAAL,CAAayB,QAAb;AACH,aAJD;AAKH,SAND;AAOH;AAlDa;;AAqDlBK,OAAOC,OAAP,GAAiBjC,WAAjB","file":"builder.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst mkdirp = require('mkdirp')\nconst path = require('path')\n\nclass CopyBuilder {\n    constructor(builder) {\n        this.builder = builder\n        this.src = builder.getDirectory('source')\n        this.dest = builder.getDirectory('destination')\n        this.isCompiled = false\n    }\n\n    getTypes() {\n        return ['copy']\n    }\n\n    _copy(src) {\n        const reSrc = new RegExp(`^${this.src}/`)\n\n        const dest = src.replace(reSrc, `${this.dest}/`)\n\n        this.builder.debug(`copy: ${src} -> ${dest}`)\n\n        mkdirp.sync(path.dirname(dest))\n        fs.createReadStream(src).pipe(fs.createWriteStream(dest))\n    }\n\n    _run(entries) {\n        const files = entries.map(entry => entry.path)\n\n        this.builder.verbose(`copy builder: ${files.join(', ')}`)\n\n        files.forEach(filepath => {\n            this._copy(filepath)\n        })\n\n        this.isCompiled = true\n        this.builder.compiled()\n\n        return files\n    }\n\n    run(entries) {\n        this._run(entries)\n    }\n\n    watch(entries) {\n        this._run(entries).forEach(filepath => {\n            fs.watch(filepath, (event, filename) => {\n                this._copy(filepath)\n                this.isCompiled = true\n                this.builder.compiled()\n            })\n        })\n    }\n}\n\nmodule.exports = CopyBuilder\n"]}