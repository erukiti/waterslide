{"version":3,"sources":["../../../src/plugins/electron/finalizer.js"],"names":["fs","require","process","path","utils","Plugin","ElectronFinalizer","constructor","builder","electron","dest","getDirectory","run","plugin","requireLocal","server","create","stopOnClose","start","state","exit","restart","build","verbose","packager","Zip","packageInfo","JSON","parse","readFileSync","electronVersion","readNpmVersion","packagerConfDarwin","dir","out","name","appVersion","version","arch","asar","platform","icon","join","overwrite","env","ELECTRON_SIGN_DARWIN","err","error","archive","add","m0","m1","then","catch","err3","console","packagerConfWin32","pathes","forEach","a","split","length","module","exports"],"mappings":"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","file":"finalizer.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst process = require('process')\nconst path = require('path')\n\nconst {utils, Plugin} = require('../../waterslide')\n\n\nclass ElectronFinalizer {\n    constructor(builder) {\n        this.builder = builder\n        this.electron = null\n        this.dest = this.builder.getDirectory('destination')\n    }\n\n    run() {\n        if (!this.electron) {\n            const plugin = new Plugin()\n            this.electron = plugin.requireLocal('electron-connect').server.create({path: `./${this.dest}`, stopOnClose: true})\n            this.electron.start(state => state === 'stopped' && process.exit(0))\n        } else {\n            this.electron.restart()\n        }\n    }\n\n    build() {\n        this.builder.verbose('build electron')\n        const plugin = new Plugin()\n        const packager = plugin.requireLocal('electron-packager')\n        const Zip = plugin.requireLocal('node-7z')\n\n        const packageInfo = JSON.parse(fs.readFileSync('./package.json'))\n        const electronVersion = utils.readNpmVersion('electron')\n\n        const packagerConfDarwin = {\n            dir: this.dest,\n            out: 'release/',\n            name: packageInfo.name,\n            appVersion: packageInfo.version,\n            arch: ['x64'],\n            asar: true,\n            platform: 'darwin',\n            electronVersion,\n            icon: path.join(this.dest, 'app.icns'),\n            overwrite: true\n        }\n\n        if (process.env.ELECTRON_SIGN_DARWIN) {\n            packagerConfDarwin['sign'] = process.env.ELECTRON_SIGN_DARWIN\n        }\n\n        packager(packagerConfDarwin, (err, name) => {\n            if (err) {\n                this.builder.error(err)\n                return\n            }\n\n            let archive = new Zip()\n            archive.add(`release/${packageInfo.name}-darwin-${packageInfo.version}.7z`, `release/${packageInfo.name}-darwin-x64/`, {\n                m0: '=BCJ',\n                m1: '=LZMA:d=21'\n            }).then(() => {\n                // process.exit(1)\n            }).catch(err3 => console.error(err3))\n        })\n\n        const packagerConfWin32 = {\n            dir: this.dest,\n            out: 'release/',\n            name: packageInfo.name,\n            appVersion: packageInfo.version,\n            arch: ['ia32', 'x64'],\n            asar: true,\n            platform: 'win32',\n            electronVersion,\n            icon: path.join(this.dest, 'app.ico'),\n            overwrite: true\n        }\n\n        packager(packagerConfWin32, (err, pathes) => {\n            if (err) {\n                this.builder.error(err)\n            }\n\n            pathes.forEach((name) => {\n                const a = name.split('-')\n                const platform = a[a.length - 2]\n                const arch = a[a.length - 1]\n\n                let archive = new Zip()\n                archive.add(`release/${packageInfo.name}-${platform}-${arch}-${packageInfo.version}.7z`, name, {\n                    m0: '=BCJ',\n                    m1: '=LZMA:d=21'\n                }).then(() => {\n\n                }).catch(err3 => console.error(err3))\n\n            })\n\n        })\n    }\n}\n\nmodule.exports = ElectronFinalizer\n"]}