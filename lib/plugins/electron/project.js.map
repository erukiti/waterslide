{"version":3,"sources":["../../../src/plugins/electron/project.js"],"names":["fs","require","path","ElectronProject","operator","setTarget","setDirectory","getInstaller","jsInstaller","addDevPackage","setMain","browserGenerator","getGenerator","generate","type","iconGenerator","appJsText","readFileSync","join","__dirname","writeFile","JSON","stringify","gitInstaller","addIgnore","module","exports"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;;IAEME,e;AACF,6BAAYC,QAAZ,EAAsB;AAAA;;AAClB,aAAKA,QAAL,GAAgBA,QAAhB;AACAA,iBAASC,SAAT,CAAmB,UAAnB;AACH;;;;;;;;;;;;uCAGS,KAAKD,QAAL,CAAcE,YAAd,CAA2B,KAA3B,EAAkC,QAAlC,EAA4C,uBAA5C,C;;;;uCACA,KAAKF,QAAL,CAAcE,YAAd,CAA2B,cAA3B,EAA2C,IAA3C,EAAiD,mDAAjD,C;;;;uCACA,KAAKF,QAAL,CAAcE,YAAd,CAA2B,OAA3B,EAAoC,aAApC,EAAmD,iBAAnD,C;;;;uCACA,KAAKF,QAAL,CAAcE,YAAd,CAA2B,SAA3B,EAAsC,IAAtC,EAA4C,mBAA5C,C;;;;uCAEoB,KAAKF,QAAL,CAAcG,YAAd,CAA2B,IAA3B,C;;;AAApBC,2C;;AACNA,4CAAYC,aAAZ,CAA0B,UAA1B;AACAD,4CAAYC,aAAZ,CAA0B,mBAA1B;AACAD,4CAAYC,aAAZ,CAA0B,SAA1B;AACAD,4CAAYE,OAAZ,CAAoB,cAApB;;AAEMC,gD,GAAmB,KAAKP,QAAL,CAAcQ,YAAd,CAA2B,SAA3B,C;;uCACnBD,iBAAiBE,QAAjB,CAA0B,uBAA1B,EAAmD,EAACC,MAAM,mBAAP,EAAnD,C;;;AAEAC,6C,GAAgB,KAAKX,QAAL,CAAcQ,YAAd,CAA2B,eAA3B,C;;uCAChBG,cAAcF,QAAd,CAAuB,aAAvB,C;;;AAEAG,yC,GAAYhB,GAAGiB,YAAH,CAAgBf,KAAKgB,IAAL,CAAUC,SAAV,EAAqB,eAArB,CAAhB,C;;uCACZ,KAAKf,QAAL,CAAcgB,SAAd,CAAwB,YAAxB,EAAsCJ,SAAtC,EAAiD,EAACF,MAAM,MAAP,EAAjD,C;;;;uCACA,KAAKV,QAAL,CAAcgB,SAAd,CAAwB,kBAAxB,EAA+CC,KAAKC,SAAL,CAAe,EAAC,QAAQ,gBAAT,EAAf,EAA2C,IAA3C,EAAiD,IAAjD,CAA/C,SAA2G,EAACR,MAAM,MAAP,EAA3G,C;;;;uCAEqB,KAAKV,QAAL,CAAcG,YAAd,CAA2B,KAA3B,C;;;AAArBgB,4C;;AACNA,6CAAaC,SAAb,CAAuB,UAAvB;;;;;;;;;;;;;;;;;;;;;AAIRC,OAAOC,OAAP,GAAiBvB,eAAjB","file":"project.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\n\nclass ElectronProject {\n    constructor(operator) {\n        this.operator = operator\n        operator.setTarget('electron')\n    }\n\n    async install() {\n        await this.operator.setDirectory('src', 'source', 'source code directory')\n        await this.operator.setDirectory('src/renderer', null, 'source code directory (Electron Renderer Process)')\n        await this.operator.setDirectory('build', 'destination', 'build directory')\n        await this.operator.setDirectory('release', null, 'release directory')\n\n        const jsInstaller = await this.operator.getInstaller('js')\n        jsInstaller.addDevPackage('electron')\n        jsInstaller.addDevPackage('electron-packager')\n        jsInstaller.addDevPackage('node-7z')\n        jsInstaller.setMain('build/app.js')\n\n        const browserGenerator = this.operator.getGenerator('browser')\n        await browserGenerator.generate('src/renderer/index.js', {type: 'electron-renderer'})\n\n        const iconGenerator = this.operator.getGenerator('electron-icon')\n        await iconGenerator.generate('src/app.png')\n\n        const appJsText = fs.readFileSync(path.join(__dirname, 'sample.app.js'))\n        await this.operator.writeFile('src/app.js', appJsText, {type: 'copy'})\n        await this.operator.writeFile('src/package.json', `${JSON.stringify({'main': 'browser/app.js'}, null, '  ')}\\n`, {type: 'copy'})\n\n        const gitInstaller = await this.operator.getInstaller('git')\n        gitInstaller.addIgnore('release/')\n    }\n}\n\nmodule.exports = ElectronProject\n"]}