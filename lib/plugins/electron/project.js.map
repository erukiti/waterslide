{"version":3,"sources":["../../../src/plugins/electron/project.js"],"names":["fs","require","path","ElectronProject","constructor","operator","setTarget","install","setDirectory","jsInstaller","getInstaller","addDevPackage","setMain","setBuildConfig","browserGenerator","getGenerator","generate","type","iconGenerator","appJsText","readFileSync","join","__dirname","writeFile","JSON","stringify","gitInstaller","addIgnore","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,MAAMC,OAAOD,QAAQ,MAAR,CAAb;;AAEA,MAAME,eAAN,CAAsB;AAClBC,gBAAYC,QAAZ,EAAsB;AAClB,aAAKA,QAAL,GAAgBA,QAAhB;AACAA,iBAASC,SAAT,CAAmB,UAAnB;AACH;;AAEKC,WAAN,GAAgB;AAAA;;AAAA;AACZ,kBAAM,MAAKF,QAAL,CAAcG,YAAd,CAA2B,KAA3B,EAAkC,QAAlC,EAA4C,uBAA5C,CAAN;AACA,kBAAM,MAAKH,QAAL,CAAcG,YAAd,CAA2B,cAA3B,EAA2C,IAA3C,EAAiD,mDAAjD,CAAN;AACA,kBAAM,MAAKH,QAAL,CAAcG,YAAd,CAA2B,OAA3B,EAAoC,aAApC,EAAmD,iBAAnD,CAAN;AACA,kBAAM,MAAKH,QAAL,CAAcG,YAAd,CAA2B,SAA3B,EAAsC,IAAtC,EAA4C,mBAA5C,CAAN;;AAEA,kBAAMC,cAAc,MAAM,MAAKJ,QAAL,CAAcK,YAAd,CAA2B,IAA3B,CAA1B;AACAD,wBAAYE,aAAZ,CAA0B,UAA1B;AACAF,wBAAYE,aAAZ,CAA0B,mBAA1B;AACAF,wBAAYE,aAAZ,CAA0B,wBAA1B;AACAF,wBAAYG,OAAZ,CAAoB,cAApB;AACAH,wBAAYI,cAAZ,CAA2B;AACvB,yBAAS;AACL,oCAAgB,iCADX;AAEL,2BAAO;AACH,kCAAU,KADP;AAEH,gCAAQ;AAFL,qBAFF;AAML,2BAAO;AACH,kCAAU,IADP;AAEH,gCAAQ;AAFL;AANF;AADc,aAA3B;;AAcA,kBAAMC,mBAAmB,MAAKT,QAAL,CAAcU,YAAd,CAA2B,SAA3B,CAAzB;AACA,kBAAMD,iBAAiBE,QAAjB,CAA0B,uBAA1B,EAAmD,EAACC,MAAM,mBAAP,EAAnD,CAAN;;AAEA,kBAAMC,gBAAgB,MAAKb,QAAL,CAAcU,YAAd,CAA2B,eAA3B,CAAtB;AACA,kBAAMG,cAAcF,QAAd,CAAuB,aAAvB,CAAN;;AAEA,kBAAMG,YAAYnB,GAAGoB,YAAH,CAAgBlB,KAAKmB,IAAL,CAAUC,SAAV,EAAqB,eAArB,CAAhB,CAAlB;AACA,kBAAM,MAAKjB,QAAL,CAAckB,SAAd,CAAwB,YAAxB,EAAsCJ,SAAtC,EAAiD,EAACF,MAAM,MAAP,EAAjD,CAAN;AACA,kBAAM,MAAKZ,QAAL,CAAckB,SAAd,CAAwB,kBAAxB,EAA6C,GAAEC,KAAKC,SAAL,CAAe,EAAC,QAAQ,UAAT,EAAf,EAAqC,IAArC,EAA2C,IAA3C,CAAiD,IAAhG,EAAqG,EAACR,MAAM,MAAP,EAArG,CAAN;;AAEA,kBAAMS,eAAe,MAAM,MAAKrB,QAAL,CAAcK,YAAd,CAA2B,KAA3B,CAA3B;AACAgB,yBAAaC,SAAb,CAAuB,UAAvB;AApCY;AAqCf;AA3CiB;;AA8CtBC,OAAOC,OAAP,GAAiB1B,eAAjB","file":"project.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\n\nclass ElectronProject {\n    constructor(operator) {\n        this.operator = operator\n        operator.setTarget('electron')\n    }\n\n    async install() {\n        await this.operator.setDirectory('src', 'source', 'source code directory')\n        await this.operator.setDirectory('src/renderer', null, 'source code directory (Electron Renderer Process)')\n        await this.operator.setDirectory('build', 'destination', 'build directory')\n        await this.operator.setDirectory('release', null, 'release directory')\n\n        const jsInstaller = await this.operator.getInstaller('js')\n        jsInstaller.addDevPackage('electron')\n        jsInstaller.addDevPackage('electron-packager')\n        jsInstaller.addDevPackage('electron-installer-dmg')\n        jsInstaller.setMain('build/app.js')\n        jsInstaller.setBuildConfig({\n            'build': {\n                'artifactName': '${productName}_installer.${ext}',\n                'mac': {\n                    'target': 'dmg',\n                    'icon': 'build/app.icns'\n                },\n                'win': {\n                    'target': '7z',\n                    'icon': 'build/app.ico'\n                }\n            }\n        })\n\n        const browserGenerator = this.operator.getGenerator('browser')\n        await browserGenerator.generate('src/renderer/index.js', {type: 'electron-renderer'})\n\n        const iconGenerator = this.operator.getGenerator('electron-icon')\n        await iconGenerator.generate('src/app.png')\n\n        const appJsText = fs.readFileSync(path.join(__dirname, 'sample.app.js'))\n        await this.operator.writeFile('src/app.js', appJsText, {type: 'copy'})\n        await this.operator.writeFile('src/package.json', `${JSON.stringify({'main': './app.js'}, null, '  ')}\\n`, {type: 'copy'})\n\n        const gitInstaller = await this.operator.getInstaller('git')\n        gitInstaller.addIgnore('release/')\n    }\n}\n\nmodule.exports = ElectronProject\n"]}