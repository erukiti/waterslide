{"version":3,"sources":["../../../src/plugins/sass/builder.js"],"names":["fs","require","mkdirp","path","sass","SassBuilder","constructor","builder","src","getDirectory","dest","isCompiled","getTypes","_sass","reSrc","RegExp","replace","debug","sync","dirname","Promise","resolve","reject","render","file","outFile","err","result","writeFileSync","css","_run","entries","files","map","entry","verbose","join","filePath","compiled","run","watch","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,MAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,MAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,MAAMG,OAAOH,QAAQ,WAAR,CAAb;;AAEA,MAAMI,WAAN,CAAkB;AACdC,gBAAYC,OAAZ,EAAqB;AACjB,aAAKA,OAAL,GAAeA,OAAf;AACA,aAAKC,GAAL,GAAWD,QAAQE,YAAR,CAAqB,QAArB,CAAX;AACA,aAAKC,IAAL,GAAYH,QAAQE,YAAR,CAAqB,aAArB,CAAZ;AACA,aAAKE,UAAL,GAAkB,KAAlB;AACH;;AAEDC,eAAW;AACP,eAAO,CAAC,MAAD,CAAP;AACH;;AAEDC,UAAML,GAAN,EAAW;AACP,cAAMM,QAAQ,IAAIC,MAAJ,CAAY,IAAG,KAAKP,GAAI,GAAxB,CAAd;;AAEA,cAAME,OAAOF,IAAIQ,OAAJ,CAAYF,KAAZ,EAAoB,GAAE,KAAKJ,IAAK,GAAhC,EAAoCM,OAApC,CAA4C,kBAA5C,EAAgE,MAAhE,CAAb;;AAEA,aAAKT,OAAL,CAAaU,KAAb,CAAoB,SAAQT,GAAI,OAAME,IAAK,EAA3C;;AAEAR,eAAOgB,IAAP,CAAYf,KAAKgB,OAAL,CAAaT,IAAb,CAAZ;;AAEA,eAAO,IAAIU,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpClB,iBAAKmB,MAAL,CAAY,EAACC,MAAMhB,GAAP,EAAYiB,SAASf,IAArB,EAAZ,EAAwC,CAACgB,GAAD,EAAMC,MAAN,KAAiB;AACrD,oBAAID,GAAJ,EAAS;AACLJ,2BAAOI,GAAP;AACH,iBAFD,MAEO;AACH1B,uBAAG4B,aAAH,CAAiBlB,IAAjB,EAAuBiB,OAAOE,GAA9B;AACAR;AACH;AACJ,aAPD;AASH,SAVM,CAAP;AAWH;;AAEKS,QAAN,CAAWC,OAAX,EAAoB;AAAA;;AAAA;AAChB,kBAAMC,QAAQD,QAAQE,GAAR,CAAY;AAAA,uBAASC,MAAM/B,IAAf;AAAA,aAAZ,CAAd;;AAEA,kBAAKI,OAAL,CAAa4B,OAAb,CAAsB,iBAAgBH,MAAMI,IAAN,CAAW,IAAX,CAAiB,EAAvD;;AAEA,iBAAK,IAAIC,QAAT,IAAqBL,KAArB,EAA4B;AACxB,sBAAM,MAAKnB,KAAL,CAAWwB,QAAX,CAAN;AACH;;AAED,kBAAK1B,UAAL,GAAkB,IAAlB;AACA,kBAAKJ,OAAL,CAAa+B,QAAb;;AAEA,mBAAON,KAAP;AAZgB;AAanB;;AAEDO,QAAIR,OAAJ,EAAa;AACT,aAAKD,IAAL,CAAUC,OAAV;AACH;;AAEDS,UAAMT,OAAN,EAAe,CACd;AAtDa;;AAyDlBU,OAAOC,OAAP,GAAiBrC,WAAjB","file":"builder.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst mkdirp = require('mkdirp')\nconst path = require('path')\nconst sass = require('node-sass')\n\nclass SassBuilder {\n    constructor(builder) {\n        this.builder = builder\n        this.src = builder.getDirectory('source')\n        this.dest = builder.getDirectory('destination')\n        this.isCompiled = false\n    }\n\n    getTypes() {\n        return ['sass']\n    }\n\n    _sass(src) {\n        const reSrc = new RegExp(`^${this.src}/`)\n\n        const dest = src.replace(reSrc, `${this.dest}/`).replace(/(\\.scss|\\.sass)$/, '.css')\n\n        this.builder.debug(`sass: ${src} -> ${dest}`)\n\n        mkdirp.sync(path.dirname(dest))\n\n        return new Promise((resolve, reject) => {\n            sass.render({file: src, outFile: dest}, (err, result) => {\n                if (err) {\n                    reject(err)\n                } else {\n                    fs.writeFileSync(dest, result.css)\n                    resolve()\n                }\n            })\n\n        })\n    }\n\n    async _run(entries) {\n        const files = entries.map(entry => entry.path)\n\n        this.builder.verbose(`sass builder: ${files.join(', ')}`)\n\n        for (let filePath of files) {\n            await this._sass(filePath)\n        }\n\n        this.isCompiled = true\n        this.builder.compiled()\n\n        return files\n    }\n\n    run(entries) {\n        this._run(entries)\n    }\n\n    watch(entries) {\n    }\n}\n\nmodule.exports = SassBuilder\n"]}