{"version":3,"sources":["../../../src/plugins/webpack/builder.js"],"names":["path","require","process","getConfig","config","WebpackBuilder","constructor","builder","src","getDirectory","dest","isCompiled","webpackPath","join","cwd","webpack","getTypes","_createConfig","filename","target","rules","getLocal","map","rule","test","RegExp","use","reSrc","entry","output","dirname","resolve","replace","basename","extensions","module","devtool","plugins","DefinePlugin","JSON","stringify","getEnv","stats","warnings","errors","errorDetails","_compiled","err","console","dir","log","toString","colors","hasErrors","compiled","_getCompiler","entries","conf","verbose","opts","type","fs","writeFileSync","watch","compiler","run","exports"],"mappings":"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","file":"builder.js","sourcesContent":["'use strict'\n\nconst path = require('path')\nconst process = require('process')\n\nconst {getConfig} = require('../../waterslide')\n\nconst config = getConfig()\n\nclass WebpackBuilder {\n    constructor(builder) {\n        this.builder = builder\n        this.src = builder.getDirectory('source')\n        this.dest = builder.getDirectory('destination')\n\n        this.isCompiled = false\n\n        const webpackPath = path.join(process.cwd(), 'node_modules', 'webpack')\n        this.webpack = require(webpackPath)\n    }\n\n    getTypes() {\n        return ['node', 'web', 'electron', 'electron-renderer']\n    }\n\n    _createConfig(filename, target) {\n        const rules = config.getLocal('webpack').rules.map(rule => {\n            return {test: new RegExp(rule.test), use: rule.use}\n        })\n\n        const reSrc = new RegExp(`^${this.src}/`)\n\n        return {\n            entry: `./${filename}`,\n            output: {\n                path: path.dirname(path.resolve(filename.replace(reSrc, `./${this.dest}/`))),\n                filename: path.basename(filename.replace(/\\.[a-z]+$/, '.js'))\n            },\n            resolve: {\n                extensions: ['.js', '.jsx', 'ts', 'tsx']\n            },\n            module: {rules},\n            devtool: '#source-map',\n            target,\n            plugins: [\n                new this.webpack.DefinePlugin({\n                    'process.env.NODE_ENV': JSON.stringify(this.builder.getEnv())\n                })\n            ],\n            stats: {\n                warnings: true,\n                errors: true,\n                errorDetails: true,\n            }\n        }\n    }\n\n    _compiled(err, stats) {\n        if (err) {\n            console.dir(err)\n            return\n        }\n\n        // see. https://webpack.js.org/api/node/#error-handling\n        console.log(stats.toString({colors: true}))\n        if (stats.hasErrors()) {\n            return\n        }\n\n        this.isCompiled = true\n        this.builder.compiled()\n    }\n\n    _getCompiler(entries) {\n        const conf = entries.map(entry => {\n            this.builder.verbose(`webpack: ${entry.path} (${entry.opts.type})`)\n            return this._createConfig(entry.path, entry.opts.type)\n        })\n\n        const fs = require('fs')\n        fs.writeFileSync('webpack.config.json', JSON.stringify(conf[0], null, '  '))\n\n        return this.webpack(conf)\n    }\n\n    watch(entries) {\n        const compiler = this._getCompiler(entries)\n        compiler.watch({}, (err, stats) => this._compiled(err, stats))\n    }\n\n    run(entries) {\n        const compiler = this._getCompiler(entries)\n        compiler.run((err, stats) => this._compiled(err, stats))\n    }\n\n}\n\nmodule.exports = WebpackBuilder\n"]}