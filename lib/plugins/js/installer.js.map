{"version":3,"sources":["../../../src/plugins/js/installer.js"],"names":["require","utils","getConfig","path","fs","JsInstaller","operator","json","readFileSync","_init","values","JSON","parse","e","packages","devPackages","isYarn","getOpt","includes","config","getProjectName","getProjectDir","main","name","version","description","author","getAuthor","license","getGlobal","keywords","scripts","start","build","watch","test","bin","innocentia","checkExistsNpm","push","binPath","basename","key","obj","addDevPackage","noUse","getNoUse","defaultUse","Promise","all","filter","value","map","getInstaller","webpackInstaller","addLoader","loader","options","sourceMap","postInstall","writeFile","stringify","isRewritable","length","addCommand","join","module","exports"],"mappings":"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","file":"installer.js","sourcesContent":["'use strict'\n\nconst {utils, getConfig} = require('../../waterslide')\nconst path = require('path')\nconst fs = require('fs')\n\nclass JsInstaller {\n    constructor(operator) {\n        this.operator = operator\n\n        try {\n            const json = operator.readFileSync('package.json')\n            if (!json) {\n                this._init()\n            } else {\n                this.values = JSON.parse(json)\n            }\n        } catch (e) {\n            this._init()\n        }\n\n        this.packages = []\n        this.devPackages = []\n\n        this.isYarn = this.operator.getOpt().includes('yarn')\n    }\n\n    _init() {\n        const config = getConfig()\n\n        const getProjectName = () => this.operator.getProjectDir()\n        // FIXME: project dir -> project name\n\n        this.values = {\n            main: '',\n            name: getProjectName(),\n            version: '0.0.1',\n            description: '',\n            author: config.getAuthor(),\n            license: config.getGlobal('license'),\n            keywords: [],\n            scripts: {\n                start: 'innocentia run',\n                build: 'innocentia build',\n                watch: 'innocentia watch',\n                test: 'innocentia test'\n            },\n            bin: {},\n            innocentia: {},\n        }\n    }\n\n    static getInstaller(operator) {\n        return new this(operator)\n    }\n\n    addPackage(name) {\n        if (utils.checkExistsNpm(name)) {\n            return\n        }\n\n        this.packages.push(name)\n    }\n\n    addDevPackage(name) {\n        if (utils.checkExistsNpm(name)) {\n            return\n        }\n\n        this.devPackages.push(name)\n    }\n\n    addBin(binPath) {\n        this.values.bin[path.basename(binPath)] = binPath\n    }\n\n    setMain(name) {\n        this.values.main = name\n    }\n\n    setInnocentiaConfig(key, obj) {\n        this.values.innocentia[key] = obj\n    }\n\n    async install() {\n        this.addDevPackage('~/work/innocentia')\n\n        const noUse = this.operator.getNoUse()\n        const defaultUse = ['power-assert', 'ava', 'eslint', 'babel']\n        await Promise.all(defaultUse.filter(value => !noUse.includes(value)).map(async value => await this.operator.getInstaller(value)))\n\n        const webpackInstaller = await this.operator.getInstaller('webpack')\n        webpackInstaller.addLoader('\\\\.jsx?$', [\n            {loader: 'babel-loader', options: {sourceMap: true}}\n        ])\n\n        this.operator.postInstall(async () => {\n            await this.operator.writeFile('package.json', `${JSON.stringify(this.values, null, '  ')}\\n`, {isRewritable: true})\n\n\n            if (this.isYarn) {\n                if (this.packages.length > 0) {\n                    this.operator.addCommand(3, `yarn add ${this.packages.join(' ')} -S`)\n                }\n                if (this.devPackages.length > 0) {\n                    this.operator.addCommand(3, `yarn add ${this.devPackages.join(' ')} -D`)\n                }\n            } else {\n                if (this.packages.length > 0) {\n                    this.operator.addCommand(3, `npm i ${this.packages.join(' ')} -S`)\n                }\n                if (this.devPackages.length > 0) {\n                    this.operator.addCommand(3, `npm i ${this.devPackages.join(' ')} -D`)\n                }\n            }\n\n        })\n    }\n}\n\nmodule.exports = JsInstaller\n"]}