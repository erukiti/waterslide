{"version":3,"sources":["../../../src/plugins/typescript/installer.js"],"names":["fs","require","path","utils","TypescriptInstaller","constructor","operator","getInstaller","checkExistsNpm","checkExists","install","jsInstaller","addDevPackage","webpackInstaller","addLoader","loader","content","readFileSync","join","__dirname","toString","postInstall","writeFile","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,MAAMC,OAAOD,QAAQ,MAAR,CAAb;;AAEA,MAAM,EAACE,KAAD,KAAUF,QAAQ,kBAAR,CAAhB;;AAGA,MAAMG,mBAAN,CAA0B;AACtBC,gBAAYC,QAAZ,EAAsB;AAClB,aAAKA,QAAL,GAAgBA,QAAhB;AACH;;AAED,WAAaC,YAAb,CAA0BD,QAA1B,EAAoC;AAAA;;AAAA;AAChC,gBAAIH,MAAMK,cAAN,CAAqB,WAArB,KACAF,SAASG,WAAT,CAAqB,eAArB,CADJ,EAEE;AACE,uBAAO,IAAP;AACH;AACD,mBAAO,UAASH,QAAT,CAAP;AANgC;AAOnC;;AAEKI,WAAN,GAAgB;AAAA;;AAAA;AACZ,kBAAMC,cAAc,MAAM,OAAKL,QAAL,CAAcC,YAAd,CAA2B,IAA3B,CAA1B;AACAI,wBAAYC,aAAZ,CAA0B,WAA1B;AACAD,wBAAYC,aAAZ,CAA0B,YAA1B;;AAEA,kBAAMC,mBAAmB,MAAM,OAAKP,QAAL,CAAcC,YAAd,CAA2B,SAA3B,CAA/B;AACAM,6BAAiBC,SAAjB,CAA2B,UAA3B,EAAuC,CACnC,EAACC,QAAQ,cAAT,EADmC,EAEnC,EAACA,QAAQ,WAAT,EAFmC,CAAvC;;AAKA,kBAAMC,UAAUhB,GAAGiB,YAAH,CAAgBf,KAAKgB,IAAL,CAAUC,SAAV,EAAqB,eAArB,CAAhB,EAAuDC,QAAvD,EAAhB;AACA,mBAAKd,QAAL,CAAce,WAAd,mBAA0B,aAAY;AAClC,sBAAM,OAAKf,QAAL,CAAcgB,SAAd,CAAwB,eAAxB,EAAyCN,OAAzC,CAAN;AACH,aAFD;AAZY;AAgBf;;AA9BqB;;AAkC1BO,OAAOC,OAAP,GAAiBpB,mBAAjB","file":"installer.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\n\nconst {utils} = require('../../waterslide')\n\n\nclass TypescriptInstaller {\n    constructor(operator) {\n        this.operator = operator\n    }\n\n    static async getInstaller(operator) {\n        if (utils.checkExistsNpm('ts-loader') ||\n            operator.checkExists('tsconfig.json')\n        ) {\n            return null\n        }\n        return new this(operator)\n    }\n\n    async install() {\n        const jsInstaller = await this.operator.getInstaller('js')\n        jsInstaller.addDevPackage('ts-loader')\n        jsInstaller.addDevPackage('typescript')\n\n        const webpackInstaller = await this.operator.getInstaller('webpack')\n        webpackInstaller.addLoader('\\\\.tsx?$', [\n            {loader: 'babel-loader'},\n            {loader: 'ts-loader'},\n        ])\n\n        const content = fs.readFileSync(path.join(__dirname, 'tsconfig.json')).toString()\n        this.operator.postInstall(async () => {\n            await this.operator.writeFile('tsconfig.json', content)\n        })\n\n    }\n\n}\n\nmodule.exports = TypescriptInstaller\n"]}