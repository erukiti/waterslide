{"version":3,"sources":["../../../src/plugins/typescript/installer.js"],"names":["fs","require","path","utils","TypescriptInstaller","operator","getInstaller","jsInstaller","addDevPackage","webpackInstaller","addLoader","loader","content","readFileSync","join","__dirname","toString","postInstall","writeFile","checkExistsNpm","checkExists","module","exports"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;;eAEgBA,QAAQ,kBAAR,C;IAATE,K,YAAAA,K;;IAGDC,mB;AACF,iCAAYC,QAAZ,EAAsB;AAAA;;AAClB,aAAKA,QAAL,GAAgBA,QAAhB;AACH;;;;;;;;;;;;;;uCAY6B,KAAKA,QAAL,CAAcC,YAAd,CAA2B,IAA3B,C;;;AAApBC,2C;;AACNA,4CAAYC,aAAZ,CAA0B,WAA1B;AACAD,4CAAYC,aAAZ,CAA0B,YAA1B;;;uCAE+B,KAAKH,QAAL,CAAcC,YAAd,CAA2B,SAA3B,C;;;AAAzBG,gD;;AACNA,iDAAiBC,SAAjB,CAA2B,UAA3B,EAAuC,CACnC,EAACC,QAAQ,cAAT,EADmC,EAEnC,EAACA,QAAQ,WAAT,EAFmC,CAAvC;;AAKMC,uC,GAAUZ,GAAGa,YAAH,CAAgBX,KAAKY,IAAL,CAAUC,SAAV,EAAqB,eAArB,CAAhB,EAAuDC,QAAvD,E;;AAChB,qCAAKX,QAAL,CAAcY,WAAd,2CAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAChB,MAAKZ,QAAL,CAAca,SAAd,CAAwB,eAAxB,EAAyCN,OAAzC,CADgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAA1B;;;;;;;;;;;;;;;;;;;oFArBsBP,Q;;;;;sCAClBF,MAAMgB,cAAN,CAAqB,WAArB,KACAd,SAASe,WAAT,CAAqB,eAArB,C;;;;;kEAEO,I;;;kEAEJ,IAAI,IAAJ,CAASf,QAAT,C;;;;;;;;;;;;;;;;;;;;;AAuBfgB,OAAOC,OAAP,GAAiBlB,mBAAjB","file":"installer.js","sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst path = require('path')\n\nconst {utils} = require('../../waterslide')\n\n\nclass TypescriptInstaller {\n    constructor(operator) {\n        this.operator = operator\n    }\n\n    static async getInstaller(operator) {\n        if (utils.checkExistsNpm('ts-loader') ||\n            operator.checkExists('tsconfig.json')\n        ) {\n            return null\n        }\n        return new this(operator)\n    }\n\n    async install() {\n        const jsInstaller = await this.operator.getInstaller('js')\n        jsInstaller.addDevPackage('ts-loader')\n        jsInstaller.addDevPackage('typescript')\n\n        const webpackInstaller = await this.operator.getInstaller('webpack')\n        webpackInstaller.addLoader('\\\\.tsx?$', [\n            {loader: 'babel-loader'},\n            {loader: 'ts-loader'},\n        ])\n\n        const content = fs.readFileSync(path.join(__dirname, 'tsconfig.json')).toString()\n        this.operator.postInstall(async () => {\n            await this.operator.writeFile('tsconfig.json', content)\n        })\n\n    }\n\n}\n\nmodule.exports = TypescriptInstaller\n"]}